{
  "openapi": "3.0.1",
  "info": {
    "title": "Ping Proxies Private User API",
    "description": "API used for internal customer-facing applications.",
    "termsOfService": "https://www.pingproxies.com",
    "contact": {
      "url": "https://www.pingproxies.com",
      "email": "developer@pingproxies.com"
    },
    "version": "1.0",
    "x-logo": {
      "altText": "Ping Proxies",
      "backgroundColor": "#7065ec",
      "url": "https://pbs.twimg.com/profile_banners/1038803520605118464/1618327011/1500x500"
    }
  },
  "externalDocs": {
    "description": "General API Documentation & Concepts",
    "url": "https://internal.developer.documentation.private.user.pingproxies.com/"
  },
  "servers": [
    {
      "url": "https://development.api.private.user.pingproxies.com/1.0/"
    }
  ],
  "paths": {
    "/private/unrestricted/utilities/countries": {
      "get": {
        "tags": [
          "Utilities"
        ],
        "summary": "Retrieve ISO Country Codes",
        "description": "Retrieves a list of Country ISO Codes with their respective details, including alpha codes, calling codes, and subdivisions.\n",
        "responses": {
          "200": {
            "description": "Countries successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "alpha_2": {
                            "type": "string",
                            "example": "gb"
                          },
                          "alpha_3": {
                            "type": "string",
                            "example": "gbr"
                          },
                          "calling_code": {
                            "type": "string",
                            "example": "+44"
                          },
                          "subdivisions": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "London"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Countries succesfully retrieved."
                    }
                  },
                  "example": {
                    "data": {
                      "United Kingdom": {
                        "alpha_2": "GB",
                        "alpha_3": "GBR",
                        "calling_code": "+44",
                        "subdivisions": [
                          "London",
                          "Manchester",
                          "Birmingham"
                        ]
                      },
                      "United States": {
                        "alpha_2": "US",
                        "alpha_3": "USA",
                        "calling_code": "+1",
                        "subdivisions": [
                          "Iowa",
                          "Nevada",
                          "Idaho"
                        ]
                      }
                    },
                    "message": "Countries successfully retrieved."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        }
      }
    },
    "/private/unrestricted/utilities/geolocation/{ip_address}": {
      "get": {
        "tags": [
          "Utilities"
        ],
        "summary": "Retrieve IP Address Geolocation",
        "description": "Retrieves geolocation information for a given IP address using the MaxMind service. The response includes both external data provided by MaxMind and internal data derived from internal databases.\n",
        "parameters": [
          {
            "name": "ip_address",
            "in": "path",
            "description": "IP address for which geolocation information is required",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IP Address geolocation successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "external": {
                          "type": "object",
                          "properties": {
                            "asn_id": {
                              "type": "string"
                            },
                            "city_name": {
                              "type": "string"
                            },
                            "continent_id": {
                              "type": "string"
                            },
                            "continent_name": {
                              "type": "string"
                            },
                            "country_id": {
                              "type": "string"
                            },
                            "country_name": {
                              "type": "string"
                            },
                            "latitude": {
                              "type": "number"
                            },
                            "longitude": {
                              "type": "number"
                            },
                            "timezone": {
                              "type": "string"
                            },
                            "zip_code": {
                              "type": "string"
                            }
                          },
                          "description": "External geolocation data from MaxMind."
                        },
                        "internal": {
                          "type": "object",
                          "properties": {
                            "asn": {
                              "type": "object",
                              "properties": {}
                            },
                            "city": {
                              "type": "object",
                              "properties": {}
                            },
                            "continent": {
                              "type": "object",
                              "properties": {}
                            },
                            "country": {
                              "type": "object",
                              "properties": {}
                            },
                            "ip_address": {
                              "type": "string"
                            },
                            "subdivision": {
                              "type": "object",
                              "properties": {}
                            }
                          },
                          "description": "Internal geolocation data derived from internal databases."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "IP Address geolocation successfully retrieved."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        }
      }
    },
    "/private/unrestricted/utilities/languages": {
      "get": {
        "tags": [
          "Utilities"
        ],
        "summary": "Retrieve ISO Language Codes",
        "description": "Retrieves ISO language codes and their corresponding language names.",
        "responses": {
          "200": {
            "description": "Languages successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "example": {
                        "Abkhazian": "ab",
                        "Afar": "aa",
                        "Afrikaans": "af",
                        "Akan": "ak",
                        "Albanian": "sq",
                        "Amharic": "am",
                        "Arabic": "ar",
                        "Aragonese": "an",
                        "Armenian": "hy"
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Languages succesfully retrieved."
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        }
      }
    },
    "/private/user/api_key/create": {
      "post": {
        "tags": [
          "API Key"
        ],
        "summary": "Create API Key",
        "description": "Allows a user to create a new API Key for their account. The system limits the number of  active API keys per user. If the maximum number is reached, the user must remove an existing  key before they can generate a new one.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The API Key creation details.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "api_key_label": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "Label for the API Key."
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "API Key Successfully Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "description": "A list containing the ID of the created API key."
                      }
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "api_key_private_key": {
                          "type": "string",
                          "description": "The API key private key string."
                        },
                        "api_key_public_key": {
                          "type": "string",
                          "description": "The API key public key string."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "A message indicating the success of the operation."
                    }
                  }
                },
                "example": {
                  "created": [
                    123
                  ],
                  "data": {
                    "api_key_private_key": "X9akD14swPxtoRtCFVLt00EgtlFha5freNLWIr87nBDK3YfIfopULr7LpiNdHFrd",
                    "api_key_public_key": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42"
                  },
                  "message": "API Key successfully created."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Max API Keys Reached",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnprocessableResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/api_key/delete/{api_key_id}": {
      "delete": {
        "tags": [
          "API Key"
        ],
        "summary": "Delete API Key",
        "description": "Allows a user to delete an existing API Key associated with their account.  The system sets the status of the API key to \"deleted\".\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_key_id",
            "in": "path",
            "description": "ID of the API key to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API Key Successfully Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeySuccessfulDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No API Key with this ID",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/api_key/retrieve/{api_key_id}": {
      "get": {
        "tags": [
          "API Key"
        ],
        "summary": "Retrieve API Key",
        "description": "Retrieves a specific API Key based on the provided ID for the current user's account.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_key_id",
            "in": "path",
            "description": "ID of the API Key to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful API Key Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiKeySuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "API Key Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/api_key/search": {
      "get": {
        "tags": [
          "API Key"
        ],
        "summary": "Search API Keys",
        "description": "Search API Keys on the customer account using various filters.  Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_key_id",
            "in": "query",
            "description": "ID of the API key",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "api_key_status",
            "in": "query",
            "description": "Status of the API key.",
            "schema": {
              "type": "string",
              "enum": [
                "deleted",
                "active"
              ]
            }
          },
          {
            "name": "api_key_private_key_preview",
            "in": "query",
            "description": "Preview of the API key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_key_scope",
            "in": "query",
            "description": "Scope of the API key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_key_label",
            "in": "query",
            "description": "Label of the API key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_key_creation_datetime",
            "in": "query",
            "description": "Datetime the API key was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "api_key_last_update_datetime",
            "in": "query",
            "description": "Datetime the API key was last updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful API Key search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiKeySuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/api_request/analytics": {
      "get": {
        "tags": [
          "API Request"
        ],
        "summary": "API Request Analytics",
        "description": "This endpoint analyzes API request data for a given customer over a specified time range and interval. It returns a summary including the total number of requests, errors, and successful requests, broken down by the specified intervals.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "min_api_request_creation_datetime",
            "in": "query",
            "description": "Minimum api_request_creation_datetime of the API request",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "max_api_request_creation_datetime",
            "in": "query",
            "description": "Maximum api_request_creation_datetime of the API request",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The interval for summarizing analytics. Must be in the format <integer> <unit> where <unit> is one of minute, hour, day. Accepted granulaity is per minute up to one hour, per ten minutes up to 72 hours, per hour up to one week and per day up to one year.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_request_id",
            "in": "query",
            "description": "ID of the API request",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "api_request_method",
            "in": "query",
            "description": "HTTP method of the API request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_request_path",
            "in": "query",
            "description": "Path of the API request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_request_client_ip_address",
            "in": "query",
            "description": "Client IP address of the API request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_request_client_user_agent",
            "in": "query",
            "description": "Client user agent of the API request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_request_status_code",
            "in": "query",
            "description": "HTTP status code of the API request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API Request analysis successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The count of intervals analyzed."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "intervals": {
                          "type": "array",
                          "description": "Detailed breakdown of requests, errors, and successful responses for each interval.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "error": {
                                "type": "integer"
                              },
                              "interval": {
                                "type": "string"
                              },
                              "requests": {
                                "type": "integer"
                              },
                              "successful": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "total_error": {
                          "type": "integer",
                          "description": "The total number of error responses in the given period."
                        },
                        "total_requests": {
                          "type": "integer",
                          "description": "The total number of API requests in the given period."
                        },
                        "total_successful": {
                          "type": "integer",
                          "description": "The total number of successful responses in the given period."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message.",
                      "example": "API Request analysis successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "API Request Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/api_request/retrieve/{api_request_id}": {
      "get": {
        "tags": [
          "API Request"
        ],
        "summary": "Retrieve API Request",
        "description": "Retrieves a specific API Request based on the provided ID for the current user's account.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_request_id",
            "in": "path",
            "description": "ID of the API Request to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful API Request Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiRequestSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "API Request Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/api_request/search": {
      "get": {
        "tags": [
          "API Request"
        ],
        "summary": "Search API Requests",
        "description": "Search API Requests on the customer account using various filters.  Operations including max_, min_, like_, and sorting are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_request_id",
            "in": "query",
            "description": "ID of the API request",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "api_request_method",
            "in": "query",
            "description": "HTTP method of the API request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_request_path",
            "in": "query",
            "description": "Path of the API request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_request_client_ip_address",
            "in": "query",
            "description": "Client IP address of the API request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_request_client_user_agent",
            "in": "query",
            "description": "Client user agent of the API request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_request_status_code",
            "in": "query",
            "description": "HTTP status code of the API request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "min_api_request_creation_datetime",
            "in": "query",
            "description": "Minimum api_request_creation_datetime of the API request",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "max_api_request_creation_datetime",
            "in": "query",
            "description": "Maximum api_request_creation_datetime of the API request",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful API Request search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiRequestSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/asn/retrieve/{asn_id}": {
      "get": {
        "tags": [
          "ASN"
        ],
        "summary": "Retrieve ASN",
        "description": "Retrieves a specific ASN.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn_id",
            "in": "path",
            "description": "ID of the ASN to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful ASN Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AsnSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "ASN Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/asn/search": {
      "get": {
        "tags": [
          "ASN"
        ],
        "summary": "Search ASN",
        "description": "Search Autonomous System Number (ASN) entries using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn_id",
            "in": "query",
            "description": "Unique identifier of the ASN",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn_name",
            "in": "query",
            "description": "Name associated with the ASN",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_id",
            "in": "query",
            "description": "Country identifier where the ASN is registered",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn_type",
            "in": "query",
            "description": "Type of the ASN (e.g., hosting, isp, business, etc.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn_rir",
            "in": "query",
            "description": "Regional Internet Registry (RIR) associated with the ASN",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn_ip_address_count",
            "in": "query",
            "description": "Count of IP addresses associated with the ASN",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful ASN search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AsnSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/balance_transaction/retrieve/{balance_transaction_id}": {
      "get": {
        "tags": [
          "Balance Transaction"
        ],
        "summary": "Retrieve Balance Transaction",
        "description": "Retrieves a specific Balance Transaction based on the provided ID for the current user's account.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "balance_transaction_id",
            "in": "path",
            "description": "ID of the Balance Transaction to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Balance Transaction Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BalanceTransactionSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Balance Transaction Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/balance_transaction/search": {
      "get": {
        "tags": [
          "Balance Transaction"
        ],
        "summary": "Search Balance Transactions",
        "description": "Search Balance Transactions on the customer account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "balance_transaction_id",
            "in": "query",
            "description": "ID of the Balance Transaction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "query",
            "description": "ID of the associated Invoice",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "balance_transaction_reason",
            "in": "query",
            "description": "Reason for the Balance Transaction",
            "schema": {
              "type": "string",
              "enum": [
                "top_up",
                "adjustment",
                "applied_to_invoice",
                "credit_note invoice_too_small",
                "invoice_too_large",
                "unapplied_from_invoice",
                "unspent_receiver_credit"
              ]
            }
          },
          {
            "name": "balance_transaction_amount",
            "in": "query",
            "description": "Amount of the Balance Transaction",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "balance_transaction_is_out_of_band",
            "in": "query",
            "description": "Indicates if the Balance Transaction is out of band",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "balance_transaction_creation_datetime",
            "in": "query",
            "description": "Datetime the Balance Transaction was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "balance_transaction_last_update_datetime",
            "in": "query",
            "description": "Datetime the Balance Transaction was last updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Balance Transaction search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BalanceTransactionSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/cart/calculate": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Calculate / Validate Cart",
        "description": "This endpoint takes the provided cart items and an optional promotional code, then calculates the total cost. It handles the application of any discounts from promotions, calculates the total considering the user's credit balance, and returns a detailed summary of the pricing. The user authentication is optional; if the user is  authenticated, the credit balance from their account will be considered in the calculation.\n",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "The cart items and optional promotional code for which to calculate the total cost.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "is_top_up": {
                    "type": "boolean",
                    "description": "Indicates whether the cart is a top-up cart. If true, the top_up_amount parameter must be provided. Other parameters are restricted if declared, for example, line_items and promotional_code.\n"
                  },
                  "line_items": {
                    "type": "array",
                    "description": "List of items in the cart, where each item is represented as a dictionary containing  'item_price_id' and 'item_quantity'. This parameter is required for the calculation.\n",
                    "items": {
                      "required": [
                        "item_price_id",
                        "item_quantity"
                      ],
                      "type": "object",
                      "properties": {
                        "item_price_id": {
                          "type": "string",
                          "description": "ID of the price associated with the product."
                        },
                        "item_quantity": {
                          "type": "integer",
                          "description": "Quantity of the product to be purchased."
                        }
                      }
                    }
                  },
                  "promotional_code": {
                    "type": "string",
                    "description": "Promotional code to apply to the cart. This parameter can not be used if is_top_up is true."
                  },
                  "top_up_amount": {
                    "type": "integer",
                    "description": "The amount to top up the user's credit balance by. This parameter is required if is_top_up is true.\n"
                  },
                  "validate_payment_platform": {
                    "type": "boolean",
                    "description": "If the list of available checkout payment platforms is validated against this specific cart and customer. This should be used at the final stage of checkout as it increases response times.\n"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully verified the cart and calculated the pricing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "allowed_coinpayments_currencies": {
                          "type": "array",
                          "description": "List of allowed currencies for coin payments.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "allowed_payment_platforms": {
                          "type": "array",
                          "description": "List of allowed payment platforms like Stripe, Bitpay.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "allowed_saved_payment_methods": {
                          "type": "array",
                          "description": "List of allowed saved payment methods with details.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "payment_method_expiry_month": {
                                "type": "integer"
                              },
                              "payment_method_expiry_year": {
                                "type": "integer"
                              },
                              "payment_method_id": {
                                "type": "string"
                              },
                              "payment_method_last_four": {
                                "type": "string"
                              },
                              "payment_method_network": {
                                "type": "string"
                              },
                              "payment_method_platform": {
                                "type": "string"
                              },
                              "payment_method_type": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "before_discount_total": {
                          "type": "integer",
                          "description": "Total cost before any discounts."
                        },
                        "credit_balance": {
                          "type": "integer",
                          "description": "User's current credit balance."
                        },
                        "credit_only_checkout": {
                          "type": "boolean",
                          "description": "Indicates if the checkout is credit only."
                        },
                        "customer_credit_balance_applied": {
                          "type": "boolean",
                          "description": "Indicates if the user's credit balance was used."
                        },
                        "customer_credit_balance_applied_amount": {
                          "type": "integer",
                          "description": "Amount of credit balance applied."
                        },
                        "disallowed_coinpayments_currencies": {
                          "type": "array",
                          "description": "List of disallowed currencies with reasons.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "currency": {
                                "type": "string"
                              },
                              "disallow_reason": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "disallowed_payment_platforms": {
                          "type": "array",
                          "description": "List of disallowed payment platforms with reasons.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "disallow_reason": {
                                "type": "string"
                              },
                              "payment_platform": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "discount": {
                          "type": "integer",
                          "description": "Discount amount applied."
                        },
                        "discounted": {
                          "type": "boolean",
                          "description": "Indicates if a discount was applied."
                        },
                        "invalid_reason": {
                          "type": "string",
                          "description": "The reason for the cart being invalid. Only set if is_valid is false."
                        },
                        "is_top_up": {
                          "type": "boolean",
                          "description": "Indicates if the cart is for a top-up."
                        },
                        "is_valid": {
                          "type": "boolean",
                          "description": "Indicates if the cart is valid to checkout. This is used when the contents of the cart is logically correct but the cart is not valid for checkout, for example, if the cart is under the minimum store order value."
                        },
                        "line_items": {
                          "type": "array",
                          "description": "Detailed list of cart items.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "item_country_id": {
                                "type": "string",
                                "description": "Country code associated with the item."
                              },
                              "item_name": {
                                "type": "string",
                                "description": "Name of the item."
                              },
                              "item_per_unit_amount": {
                                "type": "integer",
                                "description": "Cost per unit of the item."
                              },
                              "item_price_id": {
                                "type": "string",
                                "description": "Unique identifier for the item's price."
                              },
                              "item_price_type": {
                                "type": "string",
                                "description": "Type of price (one-time/recurring)."
                              },
                              "item_quantity": {
                                "type": "integer",
                                "description": "Quantity of the item in the cart."
                              },
                              "item_total": {
                                "type": "integer",
                                "description": "Total cost for the item."
                              },
                              "item_type": {
                                "type": "string",
                                "description": "Type or category of the item."
                              }
                            }
                          }
                        },
                        "promotional_code": {
                          "type": "string",
                          "description": "Promotional code applied, if any."
                        },
                        "promotional_code_id": {
                          "type": "string",
                          "description": "ID of the applied promotional code, if any."
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total cost after discounts, before credit."
                        },
                        "total_after_applied_credit": {
                          "type": "integer",
                          "description": "Total cost after discounts and credit."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. One or more parameters were missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - price_id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. The provided data is not valid for creating a checkout.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnprocessableResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/checkout/create": {
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Create Checkout",
        "description": "This endpoint creates a checkout for the authenticated user based on the provided data. It supports  different payment platforms, promotional codes, and can handle both one-time and recurring payments.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "The data needed to create the checkout.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "payment_platform"
                ],
                "type": "object",
                "properties": {
                  "coinpayments_currency": {
                    "type": "string",
                    "description": "Cryptocurrency to use for the checkout. Only applicable for if payment_platform=coinpayments.",
                    "default": "btc",
                    "enum": [
                      "xmr",
                      "usdt.erc20",
                      "usdc",
                      "ltc",
                      "bnb",
                      "eth",
                      "btc"
                    ]
                  },
                  "is_top_up": {
                    "type": "boolean",
                    "description": "Indicates whether the checkout is for topping up the customer credit balance.",
                    "default": false
                  },
                  "line_items": {
                    "type": "array",
                    "description": "List of items for the checkout, where each item is represented as a dictionary containing  'item_price_id' and 'item_quantity'. Required for if is_top_up=False.\n",
                    "items": {
                      "required": [
                        "item_price_id",
                        "item_quantity"
                      ],
                      "type": "object",
                      "properties": {
                        "item_price_id": {
                          "type": "string",
                          "description": "ID of the price associated with the product."
                        },
                        "item_quantity": {
                          "type": "integer",
                          "description": "Quantity of the product to be purchased."
                        }
                      }
                    }
                  },
                  "payment_method_id": {
                    "type": "string",
                    "description": "ID of a saved payment method to use for the payment. Usually, used for a saved Stripe card. When using, payment_platform must match the saved payment methods platform."
                  },
                  "payment_platform": {
                    "type": "string",
                    "description": "The payment platform to use for the checkout.",
                    "enum": [
                      "stripe",
                      "bitpay",
                      "coinpayments"
                    ]
                  },
                  "promotional_code": {
                    "type": "string",
                    "description": "Promotional code to apply to the checkout."
                  },
                  "top_up_amount": {
                    "type": "number",
                    "description": "Intger amount to top up in cent if is_top_up is set to true. Must be between $5-10,000 (500-1000000 cents)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Checkout was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "external_payment_id": {
                          "type": "string",
                          "description": "ID of the payment in the external system, if applicable."
                        },
                        "invoice_is_paid": {
                          "type": "boolean",
                          "description": "Indicates whether the invoice is already paid. Use this to decide whether to redirect the user to the payment URL or not."
                        },
                        "redirect_url": {
                          "type": "string",
                          "description": "URL where the user should be redirected to complete the payment."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. One or more parameters were missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - price_id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. The provided data is not valid for creating a checkout.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnprocessableResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/city/retrieve/{city_id}": {
      "get": {
        "tags": [
          "City"
        ],
        "summary": "Retrieve City",
        "description": "Retrieves a specific City.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_id",
            "in": "path",
            "description": "ID of the City to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful City Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CitySuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "City Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/city/search": {
      "get": {
        "tags": [
          "City"
        ],
        "summary": "Search City",
        "description": "Search City entries using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_id",
            "in": "query",
            "description": "ID of the City",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_name",
            "in": "query",
            "description": "Name of the City",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdivision_id",
            "in": "query",
            "description": "ID of the Subdivision which the City is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_timezone",
            "in": "query",
            "description": "Timezone of the City",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_is_popular",
            "in": "query",
            "description": "Whether the City one of the ten largest cities in its timezone with atleast 300,000 population",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "city_alias",
            "in": "query",
            "description": "Indentifier of the city when used in backconnect proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_example_postcode",
            "in": "query",
            "description": "Example postcode of the City",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_latitude",
            "in": "query",
            "description": "Latitude of the City",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_longitude",
            "in": "query",
            "description": "Longitude of the City",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful City search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CitySuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/continent/retrieve/{continent_id}": {
      "get": {
        "tags": [
          "Continent"
        ],
        "summary": "Retrieve Continent",
        "description": "Retrieves a specific Continent.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "continent_id",
            "in": "path",
            "description": "ID of the Continent to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Continent Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ContinentSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Continent Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/continent/search": {
      "get": {
        "tags": [
          "Continent"
        ],
        "summary": "Search Continent",
        "description": "Search Continent entries using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "continent_id",
            "in": "query",
            "description": "Unique two-letter identifier of the Continent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "continent_name",
            "in": "query",
            "description": "Name of the Continent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "continent_alias",
            "in": "query",
            "description": "Alias or alternative name for the Continent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Continent search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ContinentSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/country/retrieve/{country_id}": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Retrieve Country",
        "description": "Retrieves a specific Country.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_id",
            "in": "path",
            "description": "ID of the Country to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Country Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CountrySuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Country Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/country/search": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Search Country",
        "description": "Search Country entries using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_id",
            "in": "query",
            "description": "Unique two-letter identifier of the Country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_name",
            "in": "query",
            "description": "Name of the Country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "continent_id",
            "in": "query",
            "description": "Identifier of the Continent where the Country is located",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_is_european_union",
            "in": "query",
            "description": "Boolean flag indicating if the Country is a member of the European Union",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "country_alias",
            "in": "query",
            "description": "Alias or alternative name for the Country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Country search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CountrySuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/customer/edit": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Edit Customer Details",
        "description": "Allows authenticated users to edit their customer details.  Changes to email address, password, or enabling email two-factor authentication require an additional  two-factor authentication step. Ensure that the appropriate fields are provided in the request body.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "The customer details to be edited.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "country_id": {
                    "type": "string",
                    "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)"
                  },
                  "country_id_billing": {
                    "type": "string",
                    "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)"
                  },
                  "customer_billing_line_one": {
                    "type": "string",
                    "description": "First line of the customer billing address."
                  },
                  "customer_billing_line_two": {
                    "type": "string",
                    "description": "Second line of the customer billing address (optional)."
                  },
                  "customer_billing_name": {
                    "type": "string",
                    "description": "Full name for billing purposes."
                  },
                  "customer_billing_subdivision_name": {
                    "type": "string",
                    "description": "State, province, or other subdivision name of the customer billing address."
                  },
                  "customer_billing_zip_code": {
                    "type": "string",
                    "description": "Postal or ZIP code of the customer billing address."
                  },
                  "customer_email_address": {
                    "type": "string",
                    "description": "New email address of the customer. Changing this requires two-factor authentication."
                  },
                  "customer_email_two_factor_authentication": {
                    "type": "boolean",
                    "description": "Enable or disable email-based two-factor authentication. Altering this requires two-factor authentication."
                  },
                  "customer_first_name": {
                    "type": "string",
                    "description": "First name of the customer."
                  },
                  "customer_iso_language_code": {
                    "type": "string",
                    "description": "ISO Language Code [(ISO 639-1)](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)"
                  },
                  "customer_last_name": {
                    "type": "string",
                    "description": "Last name of the customer."
                  },
                  "customer_password": {
                    "type": "string",
                    "description": "New password of the customer. Changing this requires two-factor authentication."
                  },
                  "customer_phone_number": {
                    "type": "string",
                    "description": "customer phone number."
                  },
                  "customer_profile_image_url": {
                    "type": "string",
                    "description": "URL of the customer profile image."
                  },
                  "two_factor_authentication_private_key": {
                    "type": "string",
                    "description": "Required if prompted by the API. Private 2FA key provided by the customer and sent to them via email or SMS. [Conditional]"
                  },
                  "two_factor_authentication_public_key": {
                    "type": "string",
                    "description": "Required if prompted by the API. Public 2FA key provided by the API when prompted for 2FA by the API. [Conditional]"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer Successfully Edited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "edited": {
                      "type": "array",
                      "description": "List of Customer IDs that were successfully edited.",
                      "example": [
                        132452
                      ],
                      "items": {
                        "type": "integer",
                        "description": "The Customer ID."
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the customer details were edited.",
                      "example": "Customer successfully edited."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "499": {
            "description": "Two-Factor Authentication Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationRequired"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/customer/login": {
      "post": {
        "tags": [
          "Customer",
          "Authorization"
        ],
        "summary": "Customer Login",
        "description": "Allows customers to login using their email address and password.  If the account has two-factor authentication enabled, a 499 response will be returned indicating that two-factor authentication is required. Ensure that the required fields are provided in the request body.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "The customer login credentials.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "customer_email_address",
                  "customer_password"
                ],
                "type": "object",
                "properties": {
                  "customer_email_address": {
                    "type": "string",
                    "description": "Email address of the customer."
                  },
                  "customer_password": {
                    "type": "string",
                    "description": "Password of the customer."
                  },
                  "two_factor_authentication_private_key": {
                    "type": "string",
                    "description": "Required if prompted by the API. Private 2FA key provided by the customer and sent to them via email or SMS. [Conditional]"
                  },
                  "two_factor_authentication_public_key": {
                    "type": "string",
                    "description": "Required if prompted by the API. Public 2FA key provided by the API when prompted for 2FA by the API. [Conditional]"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "description": "JWT access token for authenticated sessions."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the login was successful.",
                      "example": "Login successful."
                    }
                  }
                },
                "example": {
                  "data": {
                    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaxmenouifweobiefKKOosdmLWIxMb3hpZXMuY29tIiwiY3VzdG9tZXJfc2Vzc2lvbl9rZXkiOiJGM2lCMjZXT0VkVnRNcVpMczNoWEN4YjZlMGROSnIwS0V0Qm5SWllJV0JndWNMZ2xWVWw3RE9QU1JRcVNSZDRJODZ5bUpjODNCdnRxTHc4QW5PZzVXRUxQeEFhc09UaTRlV1dIIiwiY3VzdG9tZXJfaXNfYWRtaW4iOnRydWUsImN1c3RvbWVyX2FkbWluX3R5cGUiOiJBTEwiLCJzZXNzaW9uX2NyZWF0aW9uX3RpbWUiOiJUaHUsIDE0IFNlcCAyMDIzIDEzOjI5OjExIEdNVCIsInNlc3Npb25faXBfYWRkcmVzcyI6Ijc4LjMzLjI0LjE3OCJ9LCJuYmYiOjE2OTQ2OTgxNTEsImV4cCI6MTcyNjIzNDE1MX0.QXSwIEHsKezg-S5YwyNqufzK3amXU0So1mFVUbROPAg"
                  },
                  "message": "Login successful."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access. Possible reasons include incorrect credentials or no account exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Customer is suspended",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ForbiddenResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "499": {
            "description": "Two-Factor Authentication Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationRequired"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/customer/logout": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Customer Logout",
        "description": "Logs out the authenticated customer from the current session. This won't affect other devices or sessions. The JWT cookies associated with the session are unset, ensuring that the customer is logged out from the current device or session.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logout Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the logout was successful for the current session.",
                      "example": "Logout successful."
                    }
                  }
                },
                "example": {
                  "message": "Logout successful."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access. Please login to access this route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/customer/logout_all_devices": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Customer Clear All Sessions",
        "description": "Logs out the authenticated customer from all devices by regenerating the session key. This ensures the customer is logged out everywhere.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logout Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the logout was successful from all devices.",
                      "example": "Customer successfully logged out of all devices."
                    }
                  }
                },
                "example": {
                  "message": "Customer successfully logged out of all devices."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access. Please login to access this route.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/customer/oauth": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "OAuth Authorization URL Retrieval",
        "description": "This endpoint retrieves the OAuth authorization URL based on the external service (e.g., Google) and the specified authorization type (login, connect, signup). Instead of directly redirecting,  it returns the URL so that the client application can handle the redirection as needed.\n",
        "parameters": [
          {
            "name": "external_service",
            "in": "query",
            "description": "The name of the external OAuth service.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "google"
              ]
            }
          },
          {
            "name": "authorization_type",
            "in": "query",
            "description": "Type of OAuth action",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "login",
                "connect",
                "signup"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "redirect_url": {
                      "type": "string",
                      "description": "The OAuth authorization URL."
                    }
                  }
                },
                "example": {
                  "message": "OAuth redirect link successfully generated",
                  "redirect_url": "https://accounts.google.com/o/oauth2/auth?client_id=XYZ"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters or unsupported external service/authorization type.",
            "content": {}
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        }
      }
    },
    "/private/user/customer/oauth_reset": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Customer OAuth Reset",
        "description": "This endpoint allows the disconnection of a linked Google OAuth account from the customer Ping Proxies account.  After invoking this function, the customer linked Google OAuth id will be set to None in the database.  Important api logging events are generated, and a notification is created for the customer.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "external_service"
                ],
                "type": "object",
                "properties": {
                  "external_service": {
                    "type": "string",
                    "description": "The name of the external OAuth service",
                    "enum": [
                      "google"
                    ]
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    }
                  }
                },
                "example": {
                  "message": "Successfully unlinked Google account."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access due to incorrect credentials or no account exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "499": {
            "description": "Two-Factor Authentication Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationRequired"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/customer/password_reset": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Customer Password Reset",
        "description": "Allows customers to reset their password using their email address.  The endpoint checks for potential brute-force attacks and two-factor authentication (if enabled). After successful password reset, the customer is logged in and a notification is generated. Ensure  that the required fields are provided in the request body.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "The customer password reset credentials.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "customer_email_address",
                  "customer_password"
                ],
                "type": "object",
                "properties": {
                  "customer_email_address": {
                    "type": "string",
                    "description": "Email address of the customer."
                  },
                  "customer_password": {
                    "type": "string",
                    "description": "New password of the customer."
                  },
                  "two_factor_authentication_private_key": {
                    "type": "string",
                    "description": "Required if prompted by the API. Private 2FA key provided by the customer and sent to them via email or SMS."
                  },
                  "two_factor_authentication_public_key": {
                    "type": "string",
                    "description": "Required if prompted by the API. Public 2FA key provided by the API when prompted for 2FA by the API."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password Reset Successful & Customer Logged In",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "description": "JWT access token for authenticated sessions."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the password reset and login were successful.",
                      "example": "Password reset successful. You are now logged in."
                    }
                  }
                },
                "example": {
                  "data": {
                    "access_token": "eyJhbGciOiJIUz..........UbROPAg"
                  },
                  "message": "Password reset successful. You are now logged in."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access due to incorrect credentials or no account exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Customer is suspended or repeated failed attempts detected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "499": {
            "description": "Two-Factor Authentication Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationRequired"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/customer/retrieve": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve Current Customer",
        "description": "Retrieves the profile of the currently authenticated customer, along with their credit balance.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Customer Profile Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CustomerSuccessfulRetrieveResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "credit_balance": {
                              "type": "integer",
                              "example": 10000
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "active_residential_service_id": {
                              "type": "string",
                              "example": "130-8201-332"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "residential_bytes_left": {
                              "type": "integer",
                              "example": 313344
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "proxy_count": {
                              "type": "integer",
                              "example": 100
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/customer/security_lock/{customer_id}": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Security Lock Current Customer",
        "description": "Security lock customer with security key and customer_id.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer_id",
            "in": "path",
            "description": "ID of the customer to security lock",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Security Key Information",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "customer_security_key"
                ],
                "type": "object",
                "properties": {
                  "customer_security_key": {
                    "type": "string",
                    "description": "Security key of the customer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer successfully security locked",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/customer/signup": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Customer Signup",
        "description": "Register a new customer account using their first name, last name, email address, and password. Additionally, allows for optional parameters such as phone number, profile image URL, two-factor authentication settings, country code, and language code. After registration, a two-factor authentication step is checked and an email  notification is sent to the newly registered customer.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "The customer registration details.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "customer_email_address",
                  "customer_first_name",
                  "customer_last_name",
                  "customer_password"
                ],
                "type": "object",
                "properties": {
                  "country_id": {
                    "type": "string",
                    "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)"
                  },
                  "country_id_billing": {
                    "type": "string",
                    "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)"
                  },
                  "customer_billing_line_one": {
                    "type": "string",
                    "description": "First line of the customer billing address."
                  },
                  "customer_billing_line_two": {
                    "type": "string",
                    "description": "Second line of the customer billing address (optional)."
                  },
                  "customer_billing_name": {
                    "type": "string",
                    "description": "Full name for billing purposes."
                  },
                  "customer_billing_subdivision_name": {
                    "type": "string",
                    "description": "State, province, or other subdivision name of the customer billing address."
                  },
                  "customer_billing_zip_code": {
                    "type": "string",
                    "description": "Postal or ZIP code of the customer billing address."
                  },
                  "customer_email_address": {
                    "type": "string",
                    "description": "Email address of the customer."
                  },
                  "customer_email_two_factor_authentication": {
                    "type": "boolean",
                    "description": "Flag indicating if email two-factor authentication is enabled."
                  },
                  "customer_first_name": {
                    "type": "string",
                    "description": "First name of the customer."
                  },
                  "customer_iso_language_code": {
                    "type": "string",
                    "description": "ISO Language Code [(ISO 639-1)](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)"
                  },
                  "customer_last_name": {
                    "type": "string",
                    "description": "Last name of the customer."
                  },
                  "customer_password": {
                    "type": "string",
                    "description": "Password of the customer."
                  },
                  "customer_phone_number": {
                    "type": "string",
                    "description": "Phone number of the customer."
                  },
                  "customer_profile_image_url": {
                    "type": "string",
                    "description": "Profile image URL of the customer."
                  },
                  "two_factor_authentication_private_key": {
                    "type": "string",
                    "description": "Required if prompted by the API. Private 2FA key provided by the customer and sent to them via email or SMS. [Conditional]"
                  },
                  "two_factor_authentication_public_key": {
                    "type": "string",
                    "description": "Required if prompted by the API. Public 2FA key provided by the API when prompted for 2FA by the API. [Conditional]"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Registration Successful & Customer Logged In",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "description": "JWT access token for authenticated sessions."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the registration and login were successful.",
                      "example": "Registration successful. You are now logged in."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Conflict With Existing Customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictResponse"
                }
              }
            }
          },
          "499": {
            "description": "Two-Factor Authentication Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationRequired"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/invoice/pay/{invoice_id}": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Pay Invoice",
        "description": "Allows a customer to retrieve the payment URL for a specified invoice using different payment platforms.  Depending on the chosen payment platform, the function can return a Stripe hosted URL or a Bitpay invoice URL.  Ensure the required fields are provided in the request body.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "ID of the invoice to pay.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "The invoice details and payment platform choice.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "coinpayments_currency": {
                    "type": "string",
                    "description": "Cryptocurrency to use for the checkout. Only applicable for if payment_platform is coinpayments.",
                    "default": "btc",
                    "enum": [
                      "xmr",
                      "usdt.erc20",
                      "usdc",
                      "ltc",
                      "bnb",
                      "eth",
                      "btc"
                    ]
                  },
                  "payment_method_id": {
                    "type": "string",
                    "description": "ID of a saved payment method to use for the payment. Usually, used for a saved Stripe card. When using, payment_platform must match the saved payment methods platform."
                  },
                  "payment_platform": {
                    "type": "string",
                    "description": "The payment platform to be used for the payment.",
                    "enum": [
                      "stripe",
                      "bitpay",
                      "coinpayments"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created payment URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "external_payment_id": {
                          "type": "string",
                          "description": "External payment ID, mainly used for Bitpay / Coinpayments."
                        },
                        "invoice_is_paid": {
                          "type": "boolean",
                          "description": "Indicates whether the invoice is already paid. Use this to decide whether to redirect the user to the payment URL or not."
                        },
                        "redirect_url": {
                          "type": "string",
                          "description": "The payment URL where the user can complete the payment."
                        }
                      }
                    },
                    "edited": {
                      "type": "array",
                      "description": "List of Invoice IDs that were successfully edited.",
                      "example": [
                        "inv_234mdi123jJNL23"
                      ],
                      "items": {
                        "type": "string",
                        "description": "The Invoice ID."
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating that the payment URL was created.",
                      "example": "Successfully created payment URL."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Either the invoice is not payable or it's not open.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/invoice/pay_option/{invoice_id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Pay Invoice Option",
        "description": "Allows a customer to retrieve the payment options for an open invoice.  Will return a list of off playform options along with saved payment methods as well as disallowed options with the reason they are not available for the invoice.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "ID of the Invoice to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully verified invoice payment options.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "allowed_coinpayments_currencies": {
                          "type": "array",
                          "description": "List of allowed currencies for coin payments.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "allowed_payment_platforms": {
                          "type": "array",
                          "description": "List of allowed payment platforms like Stripe, Bitpay.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "allowed_saved_payment_methods": {
                          "type": "array",
                          "description": "List of allowed saved payment methods with details.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "payment_method_expiry_month": {
                                "type": "integer"
                              },
                              "payment_method_expiry_year": {
                                "type": "integer"
                              },
                              "payment_method_id": {
                                "type": "string"
                              },
                              "payment_method_last_four": {
                                "type": "string"
                              },
                              "payment_method_network": {
                                "type": "string"
                              },
                              "payment_method_platform": {
                                "type": "string"
                              },
                              "payment_method_type": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "disallowed_coinpayments_currencies": {
                          "type": "array",
                          "description": "List of disallowed currencies with reasons.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "currency": {
                                "type": "string"
                              },
                              "disallow_reason": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "disallowed_payment_platforms": {
                          "type": "array",
                          "description": "List of disallowed payment platforms with reasons.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "disallow_reason": {
                                "type": "string"
                              },
                              "payment_platform": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating that payment options were verified.",
                      "example": "Successfully verified invoice payment options."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Either the invoice is not payable or it's not open.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/invoice/release/{invoice_id}": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Release Invoice Cart",
        "description": "Allows a customer to release an invoice cart, thereby voiding the invoice. This operation might be necessary if the invoice is no longer required or valid. This function works mainly with Stripe invoices. If the invoice is associated with a subscription, the subscription is canceled. If not, the invoice is voided.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "ID of the invoice to release.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully released the invoice cart.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "edited": {
                      "type": "array",
                      "description": "List of Invoice IDs that were successfully released and voided.",
                      "example": [
                        "inv_234mdi123jJNL23"
                      ],
                      "items": {
                        "type": "string",
                        "description": "The Invoice ID."
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating that the invoice cart was released.",
                      "example": "Cart successfully released."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invoice cart not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Either the invoice cart couldn't be retrieved or it's not open.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/invoice/retrieve/{invoice_id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Retrieve Invoice",
        "description": "Retrieves a specific Invoice based on the provided ID for the current user's account.  Additional details like transactions and balance transactions can also be fetched based on query parameters.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "ID of the Invoice to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Invoice Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/InvoiceSuccessfulRetrieveResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "balance_transactions": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/BalanceTransaction"
                              }
                            },
                            "transactions": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Transaction"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Invoice Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/invoice/search": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Search Invoices",
        "description": "Search Invoices on the customer account using various filters.  Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "query",
            "description": "ID of the Invoice",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_amount_paid",
            "in": "query",
            "description": "Amount paid for the Invoice",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "invoice_total",
            "in": "query",
            "description": "Total amount of the Invoice",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "invoice_discounts",
            "in": "query",
            "description": "Discounts applied to the Invoice",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "invoice_due_datetime",
            "in": "query",
            "description": "Due datetime for the Invoice",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "invoice_status",
            "in": "query",
            "description": "Status of the Invoice",
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "paid",
                "void"
              ]
            }
          },
          {
            "name": "invoice_type",
            "in": "query",
            "description": "Type of the Invoice",
            "schema": {
              "type": "string",
              "enum": [
                "stripe",
                "bitpay",
                "internal"
              ]
            }
          },
          {
            "name": "service_id",
            "in": "query",
            "description": "Service ID associated with the Invoice",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_is_automatic_collection",
            "in": "query",
            "description": "Whether the Invoice has automatic collection enabled",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invoice_is_cart",
            "in": "query",
            "description": "Whether the Invoice is a cart",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invoice_pdf",
            "in": "query",
            "description": "PDF associated with the Invoice",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_url",
            "in": "query",
            "description": "URL of the Invoice",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_creation_datetime",
            "in": "query",
            "description": "Datetime the Invoice was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "invoice_last_update_datetime",
            "in": "query",
            "description": "Datetime the Invoice was last updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Invoice search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/InvoiceSuccessfulSearchResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "balance_transactions": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/components/schemas/BalanceTransaction"
                                }
                              },
                              "transactions": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/components/schemas/Transaction"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/log/analytics": {
      "get": {
        "tags": [
          "Log"
        ],
        "summary": "Log Analytics",
        "description": "This endpoint analyzes logs for a given customer within a specified time range and interval. It provides a summary including total bytes, total number of requests, errors, and successful requests, segmented by the specified intervals. The analysis can be done on immediate log data or log summaries, depending on the retention period.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "min_log_creation_datetime",
            "in": "query",
            "description": "The minimum datetime for the creation of logs to consider in the analysis.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "datetime",
              "default": "7 days ago"
            }
          },
          {
            "name": "max_log_creation_datetime",
            "in": "query",
            "description": "The maximum datetime for the creation of logs to consider in the analysis.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "datetime",
              "default": "current datetime"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The interval for summarizing analytics. Must be in the format <integer> <unit> where <unit> is one of minute, hour, day. Accepted granulaity is per minute up to one hour, per ten minutes up to 72 hours, per hour up to one week and per day up to one year.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "1 hour"
            }
          },
          {
            "name": "log_network",
            "in": "query",
            "description": "Network type of the Log",
            "schema": {
              "type": "string",
              "enum": [
                "datacenter",
                "isp",
                "residential"
              ]
            }
          },
          {
            "name": "log_domain",
            "in": "query",
            "description": "Domain associated with the Log",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_user_id",
            "in": "query",
            "description": "ID of the associated Proxy User",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log analysis successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The count of intervals analyzed."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "intervals": {
                          "type": "array",
                          "description": "Detailed breakdown of bytes, requests, errors, and successful logs for each interval.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "bytes": {
                                "type": "integer"
                              },
                              "error": {
                                "type": "integer"
                              },
                              "interval": {
                                "type": "string"
                              },
                              "requests": {
                                "type": "integer"
                              },
                              "successful": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "total_bytes": {
                          "type": "integer",
                          "description": "The total number of bytes logged in the given period."
                        },
                        "total_error": {
                          "type": "integer",
                          "description": "The total number of error logs in the given period."
                        },
                        "total_requests": {
                          "type": "integer",
                          "description": "The total number of log requests in the given period."
                        },
                        "total_successful": {
                          "type": "integer",
                          "description": "The total number of successful log entries in the given period."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message.",
                      "example": "Log analysis successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/log/retrieve/{log_id}": {
      "get": {
        "tags": [
          "Log"
        ],
        "summary": "Retrieve Log",
        "description": "Retrieves a specific Log based on the provided ID for the current user's account.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_id",
            "in": "path",
            "description": "ID of the Log to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Log Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/LogSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Log Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/log/search": {
      "get": {
        "tags": [
          "Log"
        ],
        "summary": "Search Logs",
        "description": "Search log entries on the customer account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_id",
            "in": "query",
            "description": "ID of the Log",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_network",
            "in": "query",
            "description": "Network type of the Log",
            "schema": {
              "type": "string",
              "enum": [
                "datacenter",
                "isp",
                "residential"
              ]
            }
          },
          {
            "name": "proxy_hostserver_id",
            "in": "query",
            "description": "ID of the associated Proxy Hostserver",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_user_id",
            "in": "query",
            "description": "ID of the associated Proxy User",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "query",
            "description": "ID of the associated Service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_protocol",
            "in": "query",
            "description": "Protocol used in the Log",
            "schema": {
              "type": "string",
              "enum": [
                "http",
                "https",
                "socks5_tcp",
                "socks5_udp"
              ]
            }
          },
          {
            "name": "country_id",
            "in": "query",
            "description": "ISO country code of the Log",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_alias",
            "in": "query",
            "description": "City of the Log",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn_id",
            "in": "query",
            "description": "Autonomous System Number (ASN) of the Log",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "log_session_id",
            "in": "query",
            "description": "Session ID of the Log",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_location_failover",
            "in": "query",
            "description": "Indicates if there was a location failover in the Log",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "log_session_failover",
            "in": "query",
            "description": "Indicates if there was a session failover in the Log",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "log_client_ip_address",
            "in": "query",
            "description": "Client IP address of the Log",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_ingress_ip_address",
            "in": "query",
            "description": "Ingress IP address of the Log",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_egress_ip_address",
            "in": "query",
            "description": "Egress IP address of the Log",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_ingress_port",
            "in": "query",
            "description": "Ingress port of the Log",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "log_egress_port",
            "in": "query",
            "description": "Egress port of the Log",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "log_method",
            "in": "query",
            "description": "HTTP method used in the Log",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_domain",
            "in": "query",
            "description": "Domain associated with the Log",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_status_code",
            "in": "query",
            "description": "HTTP status code of the Log",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "log_bytes",
            "in": "query",
            "description": "Size in bytes of the Log",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "log_creation_datetime",
            "in": "query",
            "description": "Datetime when the Log was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Log search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/LogSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/log_summary/retrieve/{log_summary_id}": {
      "get": {
        "tags": [
          "Log Summary"
        ],
        "summary": "Retrieve Log Summary",
        "description": "Retrieves a specific Log Summary based on the provided ID for the current user's account.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_summary_id",
            "in": "path",
            "description": "ID of the Log Summary to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Log Summary Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/LogSummarySuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Log Summary Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/log_summary/search": {
      "get": {
        "tags": [
          "Log Summary"
        ],
        "summary": "Search Log Summary",
        "description": "Search log summary entries on the customer account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_summary_id",
            "in": "query",
            "description": "ID of the Log Summary",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_user_id",
            "in": "query",
            "description": "ID of the associated Proxy User",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_summary_network",
            "in": "query",
            "description": "Network type of the Log Summary",
            "schema": {
              "type": "string",
              "enum": [
                "datacenter",
                "isp",
                "residential"
              ]
            }
          },
          {
            "name": "log_summary_domain",
            "in": "query",
            "description": "Domain associated with the Log Summary",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_summary_requests",
            "in": "query",
            "description": "Number of requests in the Log Summary",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "log_summary_successful",
            "in": "query",
            "description": "Number of successful requests in the Log Summary",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "log_summary_error",
            "in": "query",
            "description": "Number of error requests in the Log Summary",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "log_summary_bytes",
            "in": "query",
            "description": "Total bytes in the Log Summary",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "log_summary_period",
            "in": "query",
            "description": "Period of the Log Summary",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "log_summary_creation_datetime",
            "in": "query",
            "description": "Creation datetime of the Log Summary",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "log_summary_last_update_datetime",
            "in": "query",
            "description": "Last update datetime of the Log Summary",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Log Summary search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/LogSummarySuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/notification/read": {
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Mark Notification as Read",
        "description": "Allows a user to mark one or multiple notifications as \"read\". This function will update the  'notification_read_datetime' field of the notification(s) with the current timestamp, indicating that the user has seen and acknowledged the notification(s).\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully marked notifications as read.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "edited": {
                      "type": "array",
                      "description": "List of notification IDs that were successfully edited.",
                      "example": [
                        123
                      ],
                      "items": {
                        "type": "integer",
                        "description": "The Notification ID."
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating that the notifications were marked as read.",
                      "example": "Notifications successfully updated to read."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/notification/retrieve/{notification_id}": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Retrieve Notification",
        "description": "Retrieves a specific Notification based on the provided ID for the current user's account.  Additional related objects to the notification can be fetched and added to the result if necessary.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notification_id",
            "in": "path",
            "description": "ID of the Notification to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Notification Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotificationSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Notification Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/notification/search": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Search Notifications",
        "description": "Search Notifications on the customer account using various filters.  Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notification_id",
            "in": "query",
            "description": "ID of the notification",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "notification_title",
            "in": "query",
            "description": "Title of the notification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notification_content",
            "in": "query",
            "description": "Content of the notification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notification_preview",
            "in": "query",
            "description": "Preview text of the notification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notification_type",
            "in": "query",
            "description": "Type of the notification",
            "schema": {
              "type": "string",
              "enum": [
                "promotion",
                "service",
                "account",
                "network",
                "other"
              ]
            }
          },
          {
            "name": "notification_icon",
            "in": "query",
            "description": "Icon related to the notification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notification_link",
            "in": "query",
            "description": "Link URL associated with the notification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notification_scope",
            "in": "query",
            "description": "Scope of the notification",
            "schema": {
              "type": "string",
              "enum": [
                "customer",
                "global"
              ]
            }
          },
          {
            "name": "notification_is_email",
            "in": "query",
            "description": "If the notification is sent via email",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "notification_read_datetime",
            "in": "query",
            "description": "Datetime the notification was read",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "notification_creation_datetime",
            "in": "query",
            "description": "Datetime the notification was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "notification_last_update_datetime",
            "in": "query",
            "description": "Datetime the notification was last updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Notification search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotificationSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/payment_method/delete/{payment_method_id}": {
      "delete": {
        "tags": [
          "Payment Method"
        ],
        "summary": "Delete Payment Method",
        "description": "Allows a user to delete an existing payment method associated with their account.  Payment methods that are attached to service subscriptions can not be deleted until they are removed from such subscriptions.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_method_id",
            "in": "path",
            "description": "ID of the payment method to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Method Successfully Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodSuccessfulDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - payment_method_id must be provided",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Payment Method not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Payment Method attached to subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnprocessableResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/payment_method/edit/{payment_method_id}": {
      "patch": {
        "tags": [
          "Payment Method"
        ],
        "summary": "Edit Payment Method",
        "description": "This endpoint allows a user to edit an existing Payment Method by providing the necessary payment_method_id. \n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_method_id",
            "in": "path",
            "description": "ID of the Payment Method record to edit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "The Payment Method details to be edited.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payment_method_billing_name": {
                    "type": "string",
                    "description": "The billing name associated with the Payment Method."
                  },
                  "payment_method_expiry_month": {
                    "type": "integer",
                    "description": "The expiry month in integer format 1-12 of the Payment Method."
                  },
                  "payment_method_expiry_year": {
                    "type": "integer",
                    "description": "The expiry year in integer format of the Payment Method."
                  },
                  "payment_method_is_default": {
                    "type": "boolean",
                    "description": "Determines whether the Payment Method is the default Payment Method for the customer."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method Successfully Edited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "edited": {
                      "type": "array",
                      "description": "List of Payment Method IDs that were successfully edited.",
                      "example": [
                        "pm_Zkx2kJSpqsjkkc8x"
                      ],
                      "items": {
                        "type": "string",
                        "description": "The Payment Method ID."
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the Payment Method was edited.",
                      "example": "Payment Method successfully edited."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/payment_method/retrieve/{payment_method_id}": {
      "get": {
        "tags": [
          "Payment Method"
        ],
        "summary": "Retrieve Payment Method",
        "description": "Retrieves a specific Payment Method based on the provided ID for the current user's account.  Additional related objects to the payment method can be fetched and added to the result if necessary.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_method_id",
            "in": "path",
            "description": "ID of the Payment Method to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Payment Method Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaymentMethodSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Payment Method Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/payment_method/search": {
      "get": {
        "tags": [
          "Payment Method"
        ],
        "summary": "Search Payment Methods",
        "description": "Search Payment Methods on the customer account using various filters.  Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_method_id",
            "in": "query",
            "description": "ID of the Payment Method",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_method_billing_name",
            "in": "query",
            "description": "Billing name associated with the Payment Method",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_method_fingerprint",
            "in": "query",
            "description": "Fingerprint of the Payment Method",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_method_last_four",
            "in": "query",
            "description": "Last four digits of the Payment Method",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_method_network",
            "in": "query",
            "description": "Network of the Payment Method (e.g., visa)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_method_platform",
            "in": "query",
            "description": "Platform of the Payment Method",
            "schema": {
              "type": "string",
              "enum": [
                "stripe",
                "bitpay",
                "coinpayments"
              ]
            }
          },
          {
            "name": "payment_method_status",
            "in": "query",
            "description": "Status of the Payment Method",
            "schema": {
              "type": "string",
              "enum": [
                "attached",
                "detached"
              ]
            }
          },
          {
            "name": "payment_method_type",
            "in": "query",
            "description": "Type of the Payment Method",
            "schema": {
              "type": "string",
              "enum": [
                "card"
              ]
            }
          },
          {
            "name": "payment_method_is_default",
            "in": "query",
            "description": "Whether the Payment Method is default",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "payment_method_expiry_month",
            "in": "query",
            "description": "Expiry month of the Payment Method",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "payment_method_expiry_year",
            "in": "query",
            "description": "Expiry year of the Payment Method",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "payment_method_creation_datetime",
            "in": "query",
            "description": "Datetime the Payment Method was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "payment_method_last_update_datetime",
            "in": "query",
            "description": "Datetime the Payment Method was last updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Payment Method search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaymentMethodSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/payment_method/setup": {
      "post": {
        "tags": [
          "Payment Method"
        ],
        "summary": "Set Up Payment Method",
        "description": "This endpoint facilitates the setup of a payment method for the authenticated user, with specific platform support  (e.g., stripe). The returned value provides a URL redirect for the user to complete the setup on the respective platform.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "Payment Method Set Up Information",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payment_platform": {
                    "type": "string",
                    "description": "Platform used for the payment (e.g., stripe).",
                    "default": "stripe"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created payment setup URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "redirect_url": {
                          "type": "string",
                          "description": "URL redirect for the user to complete the payment setup on the respective platform"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Message indicating the success of the setup initiation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/product/search": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Search Product",
        "description": "Search Products entries using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product_id",
            "in": "query",
            "description": "Unique identifier of the Product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product_type",
            "in": "query",
            "description": "Type associated with the Product",
            "schema": {
              "type": "string",
              "enum": [
                "credit",
                "datacenter",
                "isp",
                "residential"
              ]
            }
          },
          {
            "name": "product_protocol",
            "in": "query",
            "description": "Protocol associated with the Product",
            "schema": {
              "type": "string",
              "enum": [
                "ipv4",
                "ipv6",
                "dual"
              ]
            }
          },
          {
            "name": "country_id",
            "in": "query",
            "description": "Country ID for the region of the product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product_is_active",
            "in": "query",
            "description": "Whether the Product is active",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "product_is_one_per_customer",
            "in": "query",
            "description": "Whether the Product is one per customer",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "product_is_one_active_per_customer",
            "in": "query",
            "description": "Whether the Product is one active per customer",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "product_is_per_ip",
            "in": "query",
            "description": "Whether the Product is one per IP",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "product_creation_datetime",
            "in": "query",
            "description": "Creation datetime of the Product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product_last_update_datetime",
            "in": "query",
            "description": "Last update datetime of the Product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product search with stock successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "country_id": {
                            "type": "string",
                            "example": "null"
                          },
                          "product_creation_datetime": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "product_description": {
                            "type": "string",
                            "example": "null"
                          },
                          "product_id": {
                            "type": "string",
                            "example": "prod_OPavByPppOW0U9"
                          },
                          "product_image": {
                            "type": "string",
                            "example": "https://files.stripe.com/links/MDB8YWNjdF8xSDdkOEFCMkJVbHFpbTVsfGZsX2xpdmVfUTFPQXRNTGdXNVFad2dLTDZnSm01a3dz00bEOl840O"
                          },
                          "product_instock": {
                            "type": "boolean",
                            "example": true
                          },
                          "product_is_active": {
                            "type": "boolean",
                            "example": true
                          },
                          "product_is_available": {
                            "type": "boolean",
                            "example": true
                          },
                          "product_is_per_ip": {
                            "type": "boolean",
                            "example": false
                          },
                          "product_is_visible": {
                            "type": "boolean",
                            "example": true
                          },
                          "product_last_update_datetime": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "product_name": {
                            "type": "string",
                            "example": "Residential Pro 1GB Package"
                          },
                          "product_prices": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "price_amount": {
                                  "type": "integer",
                                  "example": 1000
                                },
                                "price_cycle_interval": {
                                  "type": "string",
                                  "example": "day"
                                },
                                "price_cycle_interval_count": {
                                  "type": "integer",
                                  "example": 3
                                },
                                "price_id": {
                                  "type": "string",
                                  "example": "price_1NcljeB2BUlqim5lyM2hkvps"
                                },
                                "price_is_subscription": {
                                  "type": "boolean",
                                  "example": false
                                },
                                "price_package_quantity": {
                                  "type": "integer",
                                  "example": 10
                                },
                                "price_per_unit_amount": {
                                  "type": "integer",
                                  "example": 1000
                                },
                                "price_tier_type": {
                                  "type": "string",
                                  "example": "volume"
                                },
                                "price_tiers": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "price_tier_amount": {
                                        "type": "string",
                                        "example": "150"
                                      },
                                      "price_tier_up_to": {
                                        "type": "integer",
                                        "example": 24
                                      }
                                    }
                                  }
                                },
                                "price_type": {
                                  "type": "string",
                                  "example": "one_time"
                                }
                              }
                            }
                          },
                          "product_stock": {
                            "type": "integer",
                            "example": -1
                          },
                          "product_type": {
                            "type": "string",
                            "example": "residential"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        }
      }
    },
    "/private/user/proxy/edit/{proxy_id}": {
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Proxy Edit",
        "description": "This endpoint is for editing an existing proxy in the system using the provided 'proxy_id'. It allows updating Proxy Specific Authentication username or password.\n",
        "parameters": [
          {
            "name": "proxy_id",
            "in": "path",
            "description": "The unique identifier of the proxy to be edited.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The proxy edit details.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "proxy_password": {
                    "type": "string",
                    "description": "Proxy Specific Authentication password of the proxy."
                  },
                  "proxy_username": {
                    "type": "string",
                    "description": "Proxy Specific Authentication username of the proxy."
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Proxy successfully edited.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "edited": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "A list containing the ID of the edited proxy."
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "A success message."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Proxy not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/proxy/list_by_id": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Retrieve Proxy List By ID",
        "description": "This endpoint retrieves a list of proxies assigned to the current user based on the specified proxy IDs. It supports filtering and returning proxies in different formats, protocols, and IP versions. The list of proxies can be customized to include different authorization types and can be returned in a user-friendly format according to the user's needs.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_ids",
            "in": "query",
            "description": "Comma-separated list of proxy_id values of the proxies you want to be returned in the list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list_protocol",
            "in": "query",
            "description": "Desired protocol for the proxies in the returned list.",
            "schema": {
              "type": "string",
              "default": "http",
              "enum": [
                "http",
                "socks5"
              ]
            }
          },
          {
            "name": "list_version",
            "in": "query",
            "description": "IP version preference.",
            "schema": {
              "type": "string",
              "default": "ipv4",
              "enum": [
                "ipv4",
                "ipv6"
              ]
            }
          },
          {
            "name": "list_format",
            "in": "query",
            "description": "Desired format for displaying the proxies in the returned list.",
            "schema": {
              "type": "string",
              "default": "standard",
              "enum": [
                "standard",
                "http",
                "socks5",
                "python_requests"
              ]
            }
          },
          {
            "name": "proxy_user_id",
            "in": "query",
            "description": "ID of the proxy_user used for authentication with the proxies.",
            "schema": {
              "type": "string",
              "default": "default proxy_user"
            }
          },
          {
            "name": "list_authentication",
            "in": "query",
            "description": "Authentication type for the proxies in the returned list.",
            "schema": {
              "type": "string",
              "default": "username_and_password",
              "enum": [
                "username_and_password",
                "ip_address",
                "proxy_specific"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created proxy list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "List of proxies.",
                      "example": [
                        "192.168.1.1:8080",
                        "192.168.1.2:8080",
                        "socks5://user:password@192.168.1.3:8080"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message.",
                      "example": "Proxy list successfully created."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Proxies or authentication not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/proxy/list_by_search": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Retrieve Proxy List By Search",
        "description": "This endpoint retrieves a list of available proxies for a user based on provided search parameters. The search parameters allow the user to filter the proxies based on protocol, version, format, and associated service ID. The function returns proxies in various formats suitable for different purposes.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list_protocol",
            "in": "query",
            "description": "Desired protocol for the proxies you want returned in the search list.",
            "schema": {
              "type": "string",
              "default": "http",
              "enum": [
                "http",
                "socks5"
              ]
            }
          },
          {
            "name": "list_version",
            "in": "query",
            "description": "IP version preference.",
            "schema": {
              "type": "string",
              "default": "ipv4",
              "enum": [
                "ipv4",
                "ipv6"
              ]
            }
          },
          {
            "name": "list_format",
            "in": "query",
            "description": "Desired format for displaying the proxies you want returned in the search.",
            "schema": {
              "type": "string",
              "default": "standard",
              "enum": [
                "standard",
                "http",
                "socks5",
                "python_requests"
              ]
            }
          },
          {
            "name": "proxy_user_id",
            "in": "query",
            "description": "ID of the proxy_user you want to use to authenticate with the proxies",
            "schema": {
              "type": "string",
              "default": "default proxy_user"
            }
          },
          {
            "name": "list_authentication",
            "in": "query",
            "description": "Authentication ID for the proxies you want returned in the search.",
            "schema": {
              "type": "string",
              "default": "username_and_password",
              "enum": [
                "username_and_password",
                "ip_address",
                "proxy_specific"
              ]
            }
          },
          {
            "name": "proxy_id",
            "in": "query",
            "description": "ID of the proxy",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "service_id",
            "in": "query",
            "description": "Service ID associated with the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_ip_address",
            "in": "query",
            "description": "Main IP Address of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subnet_id",
            "in": "query",
            "description": "Main subnet of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subnet_id_v6",
            "in": "query",
            "description": "Main subnet of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip_address_id_v4",
            "in": "query",
            "description": "IPv4 address ID of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip_address_id_v6",
            "in": "query",
            "description": "IPv6 address ID of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_hostname",
            "in": "query",
            "description": "Hostname of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "http_formatted",
            "in": "query",
            "description": "Formatted http proxy string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_http_port",
            "in": "query",
            "description": "http port of the proxy",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "proxy_socks5_port",
            "in": "query",
            "description": "socks5 port of the proxy",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "socks5_formatted",
            "in": "query",
            "description": "Formatted socks5 proxy string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_status",
            "in": "query",
            "description": "Current status of the proxy",
            "schema": {
              "type": "string",
              "enum": [
                "available",
                "in_use",
                "reserved",
                "waiting",
                "pending_deletion"
              ]
            }
          },
          {
            "name": "proxy_type",
            "in": "query",
            "description": "Type of the proxies you want returned in the search",
            "schema": {
              "type": "string",
              "enum": [
                "isp",
                "datacenter",
                "residential"
              ]
            }
          },
          {
            "name": "proxy_protocol",
            "in": "query",
            "description": "Version of the proxies you want returned in the search",
            "schema": {
              "type": "string",
              "enum": [
                "ipv4",
                "ipv6",
                "dual"
              ]
            }
          },
          {
            "name": "country_id",
            "in": "query",
            "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_name",
            "in": "query",
            "description": "Name of the country the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdivision_id",
            "in": "query",
            "description": "ISO Country Code [(ISO 3166-2)](https://unece.org/trade/cefact/unlocode-code-list-country-and-territory)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdivision_name",
            "in": "query",
            "description": "Name of the subdivision the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_id",
            "in": "query",
            "description": "ID of the city the proxy is located in",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "city_name",
            "in": "query",
            "description": "Name of the city the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_timezone",
            "in": "query",
            "description": "Timezone of the City the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_example_postcode",
            "in": "query",
            "description": "Example postcode of the City the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_latitude",
            "in": "query",
            "description": "Latitude of the City the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_longitude",
            "in": "query",
            "description": "Longitude of the City the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn_id",
            "in": "query",
            "description": "Unique identifier of the ASN of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn_name",
            "in": "query",
            "description": "Name associated with the ASN of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_hostserver_public_id",
            "in": "query",
            "description": "Unique public identifier of the Hostserver of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_creation_datetime",
            "in": "query",
            "description": "Datetime the proxy was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "proxy_last_update_datetime",
            "in": "query",
            "description": "Datetime the proxy was last updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved proxy list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "List of proxies.",
                      "example": [
                        "192.168.1.1:8080",
                        "192.168.1.2:8080",
                        "socks5://user:password@192.168.1.3:8080"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message.",
                      "example": "Proxy list successfully retrieved."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Proxies or authentication not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/proxy/retrieve/{proxy_id}": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Retrieve Proxy",
        "description": "Retrieves a specific Proxy based on the provided ID for the current user's account, ensuring  that only proxies associated with the customer services and in use are returned.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_id",
            "in": "path",
            "description": "ID of the Proxy to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Proxy Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ProxySuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Proxy Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/proxy/search": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Search Proxies",
        "description": "Search Proxies on the customer account using various filters.  Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_id",
            "in": "query",
            "description": "ID of the proxy",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "service_id",
            "in": "query",
            "description": "Service ID associated with the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_ip_address",
            "in": "query",
            "description": "Main IP Address of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subnet_id",
            "in": "query",
            "description": "Main subnet of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subnet_id_v6",
            "in": "query",
            "description": "Main subnet of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip_address_id_v4",
            "in": "query",
            "description": "IPv4 address ID of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip_address_id_v6",
            "in": "query",
            "description": "IPv6 address ID of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_hostname",
            "in": "query",
            "description": "Hostname of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "http_formatted",
            "in": "query",
            "description": "Formatted http proxy string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_http_port",
            "in": "query",
            "description": "http port of the proxy",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "proxy_socks5_port",
            "in": "query",
            "description": "socks5 port of the proxy",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "socks5_formatted",
            "in": "query",
            "description": "Formatted socks5 proxy string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_status",
            "in": "query",
            "description": "Current status of the proxy",
            "schema": {
              "type": "string",
              "enum": [
                "available",
                "in_use",
                "reserved",
                "waiting",
                "pending_deletion"
              ]
            }
          },
          {
            "name": "proxy_type",
            "in": "query",
            "description": "Type of the proxies you want returned in the search",
            "schema": {
              "type": "string",
              "enum": [
                "isp",
                "datacenter",
                "residential"
              ]
            }
          },
          {
            "name": "proxy_protocol",
            "in": "query",
            "description": "Version of the proxies you want returned in the search",
            "schema": {
              "type": "string",
              "enum": [
                "ipv4",
                "ipv6",
                "dual"
              ]
            }
          },
          {
            "name": "country_id",
            "in": "query",
            "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_name",
            "in": "query",
            "description": "Name of the country the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdivision_id",
            "in": "query",
            "description": "ISO Country Code [(ISO 3166-2)](https://unece.org/trade/cefact/unlocode-code-list-country-and-territory)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdivision_name",
            "in": "query",
            "description": "Name of the subdivision the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_id",
            "in": "query",
            "description": "ID of the city the proxy is located in",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "city_name",
            "in": "query",
            "description": "Name of the city the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_timezone",
            "in": "query",
            "description": "Timezone of the City the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_example_postcode",
            "in": "query",
            "description": "Example postcode of the City the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_latitude",
            "in": "query",
            "description": "Latitude of the City the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_longitude",
            "in": "query",
            "description": "Longitude of the City the proxy is located in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn_id",
            "in": "query",
            "description": "Unique identifier of the ASN of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asn_name",
            "in": "query",
            "description": "Name associated with the ASN of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_hostserver_public_id",
            "in": "query",
            "description": "Unique public identifier of the Hostserver of the proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_creation_datetime",
            "in": "query",
            "description": "Datetime the proxy was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "proxy_last_update_datetime",
            "in": "query",
            "description": "Datetime the proxy was last updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Proxy search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ProxySuccessfulSearchResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "http_formatted": {
                                "type": "string",
                                "example": "15.32.0.111:6000:yzrxnxD9:6Gh9Hm1Q"
                              },
                              "socks5_formatted": {
                                "type": "string",
                                "example": "15.32.0.111:6000:yzrxnxD9:6Gh9Hm1Q"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/proxy_user/create": {
      "post": {
        "tags": [
          "Proxy User"
        ],
        "summary": "Create Proxy User",
        "description": "This endpoint allows for the creation of a new proxy user. The username and password  are either provided or randomly generated if not provided, and other configurations  are set based on the provided parameters.\nA proxy user can have strict security, restricted services, and IP address authorizations,  and these configurations can be set during the creation of the proxy user.\nThe restrictions and validations in place ensure the integrity and security of each proxy  user created, considering various scenarios such as existing IP addresses, username restrictions,  and service statuses.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the proxy user to be created.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ip_address_authentications": {
                    "type": "array",
                    "description": "List of IP addresses authenticated for the proxy user.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "proxy_user_id": {
                    "type": "string",
                    "description": "The ID of the proxy user. It's alphanumeric and up to 16 characters.",
                    "default": "Randomly generated"
                  },
                  "proxy_user_is_strict_security": {
                    "type": "boolean",
                    "description": "Indicates whether strict security is enabled for the proxy user.",
                    "default": false
                  },
                  "proxy_user_password": {
                    "type": "string",
                    "description": "The password of the proxy user. It's alphanumeric and up to 16 characters.",
                    "default": "Randomly generated"
                  },
                  "proxy_user_residential_limit": {
                    "type": "integer",
                    "description": "The residential proxy limit for the proxy user in bytes."
                  },
                  "restricted_service_ids": {
                    "type": "array",
                    "description": "List of restricted service_ids for the proxy user.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Proxy User Successfully Created",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "created",
                    "data",
                    "message"
                  ],
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "description": "A list containing the ID of the created API key."
                      }
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "proxy_user_id": {
                          "type": "string",
                          "description": "The Proxy User ID/username."
                        },
                        "proxy_user_password": {
                          "type": "string",
                          "description": "The Proxy User password."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "A message indicating the success of the operation."
                    }
                  }
                },
                "example": {
                  "created": [
                    "QGk6iba4ep"
                  ],
                  "data": {
                    "proxy_user_id": "QGk6iba4ep",
                    "proxy_user_password": "2f84260dfdd60"
                  },
                  "message": "Proxy User successfully created."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Service Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Existing Proxy User/ IP address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Inactive Service / Proxy User limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/proxy_user/delete/{proxy_user_id}": {
      "delete": {
        "tags": [
          "Proxy User"
        ],
        "summary": "Delete Proxy User Record",
        "description": "Allows a user to delete an existing proxy user associated with their account. Proxy users that are set as account default can not be deleted,  and already deleted proxy users can not be deleted again.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_user_id",
            "in": "path",
            "description": "ID of the proxy user record to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Proxy User Successfully Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyUserSuccessfulDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No Proxy User with this ID",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Proxy User is already deleted or is account default",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnprocessableResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/proxy_user/edit/{proxy_user_id}": {
      "patch": {
        "tags": [
          "Proxy User"
        ],
        "summary": "Edit Proxy User",
        "description": "This endpoint allows a user to edit an existing Proxy User entry by providing the necessary proxy_user_id.  Various properties like password, strict security setting, restricted services, and IP Address authentications can be updated.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_user_id",
            "in": "path",
            "description": "ID of the proxy user record to edit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "The Proxy User details to be edited.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ip_address_authentications": {
                    "type": "array",
                    "description": "The list of IP addresses that are authenticated to use the Proxy User.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "proxy_user_is_strict_security": {
                    "type": "boolean",
                    "description": "The new strict security setting for the Proxy User."
                  },
                  "proxy_user_password": {
                    "type": "string",
                    "description": "The new password for the Proxy User. Must be an alphanumeric string up to 16 characters."
                  },
                  "proxy_user_residential_limit": {
                    "type": "integer",
                    "description": "The new residential limit for the Proxy User."
                  },
                  "restricted_service_ids": {
                    "type": "array",
                    "description": "The list of Service IDs to which access should be restricted.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Proxy User Successfully Edited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "edited": {
                      "type": "array",
                      "description": "List of Proxy User IDs that were successfully edited.",
                      "example": [
                        "user12345"
                      ],
                      "items": {
                        "type": "string",
                        "description": "The Proxy User ID."
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the Proxy User was edited.",
                      "example": "Proxy User successfully edited."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Proxy User or Service Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/proxy_user/retrieve/{proxy_user_id}": {
      "get": {
        "tags": [
          "Proxy User"
        ],
        "summary": "Retrieve Proxy User",
        "description": "Retrieves a specific Proxy User based on the provided ID for the current user's account.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_user_id",
            "in": "path",
            "description": "ID of the Proxy User to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Proxy User Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ProxyUserSuccessfulRetrieveResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "restricted_service_ids": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "123-1942-455"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "ip_address_authentications": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "193.222.13.1"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Proxy User Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/proxy_user/search": {
      "get": {
        "tags": [
          "Proxy User"
        ],
        "summary": "Search Proxy Users",
        "description": "Search Proxy Users on the customer account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_user_id",
            "in": "query",
            "description": "ID of the Proxy User",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_user_password",
            "in": "query",
            "description": "Password of the Proxy User",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy_user_ip_address_authentication_limit",
            "in": "query",
            "description": "IP Address authentication Limit of the Proxy User",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "proxy_user_is_deleted",
            "in": "query",
            "description": "Whether the Proxy User is deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "proxy_user_is_service_restricted",
            "in": "query",
            "description": "Whether the Proxy User is service restricted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "proxy_user_is_strict_security",
            "in": "query",
            "description": "Whether the Proxy User has strict security",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "proxy_user_is_default",
            "in": "query",
            "description": "Whether the Proxy User is default",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "proxy_user_creation_datetime",
            "in": "query",
            "description": "Creation datetime of the Proxy User",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "proxy_user_last_update_datetime",
            "in": "query",
            "description": "Last update datetime of the Proxy User",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Proxy User search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ProxyUserSuccessfulSearchResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "restricted_service_ids": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "123-1942-455"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "ip_address_authentications": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "204.132.11.200"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/residential/list": {
      "get": {
        "tags": [
          "Residential"
        ],
        "summary": "Create Residential List",
        "description": "This endpoint create a list of residential proxies based on filter parameters. The search parameters allow the user to filter the proxies based on location, version and format.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list_count",
            "in": "query",
            "description": "Number of proxies to return in the list.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "list_protocol",
            "in": "query",
            "description": "Desired protocol for the proxies you want returned in the search list.",
            "schema": {
              "type": "string",
              "default": "http",
              "enum": [
                "http",
                "socks5"
              ]
            }
          },
          {
            "name": "list_format",
            "in": "query",
            "description": "Desired format for displaying the proxies you want returned in the search.",
            "schema": {
              "type": "string",
              "default": "standard",
              "enum": [
                "standard",
                "http",
                "socks5",
                "python_requests"
              ]
            }
          },
          {
            "name": "proxy_user_id",
            "in": "query",
            "description": "ID of the proxy_user you want to use to authenticate with the proxies",
            "schema": {
              "type": "string",
              "default": "default proxy_user"
            }
          },
          {
            "name": "list_session_type",
            "in": "query",
            "description": "Session type of the residential proxies you want returned in the search list.",
            "schema": {
              "type": "string",
              "default": "sticky",
              "enum": [
                "sticky",
                "rotating"
              ]
            }
          },
          {
            "name": "country_id",
            "in": "query",
            "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes) to generate residential proxies in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city_id",
            "in": "query",
            "description": "ID of the City to generate residential proxies in",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "city_alias",
            "in": "query",
            "description": "Alias of the City to generate residential proxies in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Residential list successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "List of residential proxies.",
                      "example": [
                        "residential.pingproxies.com:8000:1_oGDQZ_c_gb_city_norwich_s_DDINPY7TQ0781XEO:vxqaFAA99F",
                        "residential.pingproxies.com:8000:1_oGDQZ_c_gb_city_norwich_s_DDINPY7TQ0781XEO:vxqaFAA99F",
                        "socks5://1_oGDQZ_c_gb_city_norwich_s_DDINPY7TQ0781XEO:vxqaFAA99F@residential.pingproxies.com:8000"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message.",
                      "example": "Residential list successfully created."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Proxies or authentication not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/residential/summary/{service_id}": {
      "get": {
        "tags": [
          "Residential"
        ],
        "summary": "Retrieve Residential Service Summary",
        "description": "This endpoint provides a detailed summary of a residential service. It returns information such as service details, usage statistics, and associated proxy users.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "The unique identifier of the residential service. If not specified, the current active service for the user is used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of residential service summary.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "proxy_user_ids": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "proxyUser123"
                          }
                        },
                        "residential_bytes": {
                          "type": "integer",
                          "example": 10024144
                        },
                        "residential_bytes_left": {
                          "type": "integer",
                          "example": 7003114
                        },
                        "residential_bytes_used": {
                          "type": "integer",
                          "example": 3021030
                        },
                        "residential_requests": {
                          "type": "integer",
                          "example": 5012
                        },
                        "service_expiry_datetime": {
                          "type": "string",
                          "format": "datetime",
                          "example": "2023-12-31T23:59:59"
                        },
                        "service_id": {
                          "type": "string",
                          "example": "121-0220-821"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Residential summary successfully generated."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Proxies or authentication not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/residential_ledger/retrieve/{residential_ledger_id}": {
      "get": {
        "tags": [
          "Residential Ledger"
        ],
        "summary": "Retrieve Residential Ledger",
        "description": "Retrieves a specific Residential Ledger based on the provided ID for the current users account.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "residential_ledger_id",
            "in": "path",
            "description": "ID of the Residential Ledger to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Residential Ledger Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResidentialLedgerSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Residential Ledger Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/residential_ledger/search": {
      "get": {
        "tags": [
          "Residential Ledger"
        ],
        "summary": "Search Residential Ledger",
        "description": "Search for entries in the Residential Ledger using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "residential_ledger_id",
            "in": "query",
            "description": "Unique identifier of the Residential Ledger entry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "query",
            "description": "Service identifier associated with the ledger entry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_adjustment_id",
            "in": "query",
            "description": "Adjustment identifier associated with the ledger entry.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "residential_ledger_reason",
            "in": "query",
            "description": "Reason for the ledger entry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "residential_ledger_requests",
            "in": "query",
            "description": "Number of requests recorded in the ledger entry.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "residential_ledger_bytes",
            "in": "query",
            "description": "Data usage in bytes recorded in the ledger entry.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "residential_ledger_period_date",
            "in": "query",
            "description": "The date of the ledger entry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "residential_ledger_creation_datetime",
            "in": "query",
            "description": "Creation datetime of the ledger entry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "residential_ledger_last_update_datetime",
            "in": "query",
            "description": "Last update datetime of the ledger entry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Residential Ledger search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResidentialLedgerSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/service/cancel/{service_id}": {
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Cancel Service",
        "description": "Allows the authenticated user to cancel a specific service associated with their account. The user provides a service_id and optionally a cancel feedback and comment.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "ID of the Service to cancel",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "Service cancellation details.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cancel_comment": {
                    "maxLength": 300,
                    "type": "string",
                    "description": "A short comment explaining the reason for cancellation. Maximum 300 characters."
                  },
                  "cancel_feedback": {
                    "type": "string",
                    "description": "Feedback code indicating the cancellation reason.\n",
                    "enum": [
                      "too_expensive",
                      "missing_features",
                      "switched_service",
                      "unused",
                      "customer_service",
                      "too_complex",
                      "low_quality",
                      "other"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully canceled the service.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "edited": {
                      "type": "array",
                      "description": "List of service IDs that were successfully canceled.",
                      "example": [
                        "198-534-243"
                      ],
                      "items": {
                        "type": "string",
                        "description": "The service ID."
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the successful cancellation of the service.",
                      "example": "Service successfully canceled."
                    },
                    "proxy_edited": {
                      "type": "array",
                      "description": "List of proxy IDs that were affected by the cancellation of the service.",
                      "example": [
                        8341,
                        1237
                      ],
                      "items": {
                        "type": "integer",
                        "description": "The proxy ID."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Service not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Invalid or unprocessable request due to inconsistency between parameters or service is not active.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/service/edit/{service_id}": {
      "patch": {
        "tags": [
          "Service"
        ],
        "summary": "Edit Service",
        "description": "Allows a user to edit the details of an existing service.  This can include changes in payment method, adjusting automatic collection,  and marking for cancellation at the end of a period.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "ID of the Service to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters required to edit the service.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cancel_comment": {
                    "type": "string",
                    "description": "Comment regarding the cancellation."
                  },
                  "cancel_feedback": {
                    "type": "string",
                    "description": "Feedback reasons for cancellation."
                  },
                  "payment_method_id": {
                    "type": "string",
                    "description": "New payment method ID."
                  },
                  "service_is_automatic_collection": {
                    "type": "boolean",
                    "description": "Flag to determine if service charge should be automatic."
                  },
                  "service_is_pending_cancellation": {
                    "type": "boolean",
                    "description": "Indicates if the service should be canceled at the end of the period."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully edited the service.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "edited": {
                      "type": "array",
                      "description": "List of service IDs that were successfully edited.",
                      "example": [
                        "198-534-243"
                      ],
                      "items": {
                        "type": "string",
                        "description": "The service ID."
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message.",
                      "example": "Service successfully edited."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Service or Payment Method not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Invalid request due to service status or other conditions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/service/reconfigure/{service_id}": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Reconfigure an Existing Service",
        "description": "This endpoint allows an authenticated user to reconfigure an existing service associated with their account. The user provides a service_id along with new configuration parameters such as price ID, quantity, and whether the changes should apply at the end of the billing period. The function validates the input, applies the changes, and commits them to the database. It also sends a notification email to the user about the service reconfiguration.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "ID of the Service to be reconfigured",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New configuration details for the service.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "end_of_period": {
                    "type": "boolean",
                    "description": "Indicates if changes apply at the end of the billing period."
                  },
                  "remove_proxy_ids": {
                    "type": "array",
                    "description": "List of proxy IDs to be removed as part of the reconfiguration.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "service_price_id": {
                    "type": "string",
                    "description": "New service price ID for reconfiguration."
                  },
                  "service_quantity": {
                    "type": "integer",
                    "description": "New service quantity for reconfiguration."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully reconfigured the service.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "edited": {
                      "type": "array",
                      "description": "List of service IDs that were successfully reconfigured.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Confirmation message of successful service reconfiguration.",
                      "example": "Service successfully reconfigured with price_id price_1OCM6DFKo7UQ3XWIPqdvUFuJ and quantity 20."
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Service reconfigured and subscription schedule created for changes to apply at the end of the billing period.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "edited": {
                      "type": "array",
                      "description": "List of service IDs that were successfully reconfigured.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Confirmation message including details of the subscription schedule created."
                    },
                    "subscription_schedule_created": {
                      "type": "array",
                      "description": "List of subscription schedule IDs created for the reconfiguration.",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Service not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable request due to invalid reconfiguration parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/service/reconfigure_calculate/{service_id}": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Calculate Reconfiguration Details for a Service",
        "description": "Allows the authenticated user to calculate the details for reconfiguring a specific service associated with their account. The user provides a service_id and reconfiguration parameters such as service price ID, service quantity, end of period flag, and proxy IDs to remove. The system validates and calculates the new configuration, returning details like new price, quantity, and total cost.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "ID of the Service to reconfigure",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Reconfiguration details for the service.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "end_of_period": {
                    "type": "boolean",
                    "description": "Flag to indicate if the reconfiguration should apply at the end of the current billing period."
                  },
                  "remove_proxy_ids": {
                    "type": "array",
                    "description": "List of proxy IDs to be removed as part of the reconfiguration.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "service_price_id": {
                    "type": "string",
                    "description": "The new service price ID for the reconfiguration."
                  },
                  "service_quantity": {
                    "type": "integer",
                    "description": "The new service quantity for the reconfiguration."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully calculated the service reconfiguration details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "anchor_behavior": {
                      "type": "string",
                      "description": "Specifies the behavior of the anchor for the reconfiguration."
                    },
                    "due": {
                      "type": "string",
                      "description": "Specifies when the reconfiguration takes effect."
                    },
                    "end_of_period": {
                      "type": "boolean",
                      "description": "Indicates if the reconfiguration applies at the end of the current billing period."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the successful calculation of reconfiguration.",
                      "example": "Service reconfiguration option validated and calculated."
                    },
                    "proration_behavior": {
                      "type": "string",
                      "description": "Specifies the proration behavior for the reconfiguration."
                    },
                    "service_price_id": {
                      "type": "string",
                      "description": "The new service price ID resulting from the reconfiguration."
                    },
                    "service_quantity": {
                      "type": "integer",
                      "description": "The new service quantity resulting from the reconfiguration."
                    },
                    "total": {
                      "type": "integer",
                      "description": "The total cost resulting from the reconfiguration."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Service not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable request due to invalid reconfiguration parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/private/user/service/reconfigure_option/{service_id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Retrieve Reconfigure Options for a Service",
        "description": "Enables the authenticated user to view available reconfiguration options for a specific service associated with their account. The user provides a service_id, and the system returns a list of possible reconfiguration options based on the service type, status, and other parameters.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "ID of the Service for which to retrieve reconfigure options",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of reconfigure options.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message indicating the retrieval of reconfigure options.",
                      "example": "Service reconfigure option list successfully generated."
                    },
                    "reconfigure_option": {
                      "type": "array",
                      "description": "List of available reconfiguration options for the service.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "end_of_period": {
                            "type": "boolean",
                            "description": "Indicates if the reconfiguration applies at the end of the current billing period."
                          },
                          "max_service_quantity": {
                            "type": "integer",
                            "description": "Maximum service quantity available for reconfiguration."
                          },
                          "min_service_quantity": {
                            "type": "integer",
                            "description": "Minimum service quantity required for reconfiguration."
                          },
                          "product_prices": {
                            "type": "array",
                            "description": "List of product prices applicable for reconfiguration.",
                            "items": {
                              "type": "object",
                              "properties": {},
                              "description": "Detailed information about each product price."
                            }
                          },
                          "require_remove_proxy_ids": {
                            "type": "boolean",
                            "description": "Indicates if proxy ID removal is required for the reconfiguration."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Service or current product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "422": {
            "description": "Service cannot be reconfigured due to its current status, lack of a subscription, or presence of a subscription schedule.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/service/retrieve/{service_id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Retrieve Service",
        "description": "Retrieves a specific Service based on the provided ID for the current user's account.  If the 'show_proxies' parameter is set to 'True', it will also fetch proxies associated  with each service and add them to the result.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "ID of the Service to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxies",
            "in": "query",
            "description": "If the proxies associated with the service should be returned",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Service Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ServiceSuccessfulRetrieveResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "proxies": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Proxy"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "residential_requests": {
                              "type": "integer",
                              "example": 122313344
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "residential_bytes": {
                              "type": "integer",
                              "example": 1124644688
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "residential_bytes_left": {
                              "type": "integer",
                              "example": 122313344
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "residential_bytes_used": {
                              "type": "integer",
                              "example": 1002331344
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "proxy_user_ids": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "p_user1"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Service Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/service/search": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Search Services",
        "description": "Search Services on the customer account using various filters. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "query",
            "description": "ID of the service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_status",
            "in": "query",
            "description": "Current status of the service",
            "schema": {
              "type": "string",
              "enum": [
                "awaiting_fulfillment",
                "awaiting_manual_fulfillment",
                "awaiting_additional",
                "fulfillment",
                "active",
                "canceled",
                "complete"
              ]
            }
          },
          {
            "name": "service_name",
            "in": "query",
            "description": "Name of the service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_type",
            "in": "query",
            "description": "Type of the service",
            "schema": {
              "type": "string",
              "enum": [
                "datacenter",
                "isp",
                "residential"
              ]
            }
          },
          {
            "name": "service_protocol",
            "in": "query",
            "description": "Protocol of the service",
            "schema": {
              "type": "string",
              "enum": [
                "ipv4",
                "ipv6",
                "dual"
              ]
            }
          },
          {
            "name": "service_quantity",
            "in": "query",
            "description": "Quantity of the service",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "payment_method_id",
            "in": "query",
            "description": "Payment method ID of the service",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "service_total",
            "in": "query",
            "description": "Total amount of the service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_cycle",
            "in": "query",
            "description": "Service cycle (e.g., \"1:month\")",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_dispatch_datetime",
            "in": "query",
            "description": "Datetime the service was dispatched",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "service_expiry_datetime",
            "in": "query",
            "description": "Datetime the service will expire",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "service_image",
            "in": "query",
            "description": "URL of the service image",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_is_automatic_collection",
            "in": "query",
            "description": "If the service is set for automatic collection",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "service_is_pending_cancellation",
            "in": "query",
            "description": "If the service is pending cancellation",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "country_id",
            "in": "query",
            "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_price_id",
            "in": "query",
            "description": "Price ID of the service",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "product_id",
            "in": "query",
            "description": "Product ID of the service",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "service_promotional_code",
            "in": "query",
            "description": "Promotional code of the service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_subscription_id",
            "in": "query",
            "description": "Subscription ID of the service",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "service_creation_datetime",
            "in": "query",
            "description": "Datetime the service was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "service_last_update_datetime",
            "in": "query",
            "description": "Datetime the service was last updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "proxies",
            "in": "query",
            "description": "If the proxies associated with the service should be returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Service search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ServiceSuccessfulSearchResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "proxies": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/components/schemas/Proxy"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "residential_requests": {
                                "type": "integer",
                                "example": 122313344
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "residential_bytes": {
                                "type": "integer",
                                "example": 1124644688
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "residential_bytes_left": {
                                "type": "integer",
                                "example": 122313344
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "residential_bytes_used": {
                                "type": "integer",
                                "example": 1002331344
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "proxy_user_ids": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "p_user1"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/service_adjustment/retrieve/{service_adjustment_id}": {
      "get": {
        "tags": [
          "Service Adjustment"
        ],
        "summary": "Retrieve Service Adjustment",
        "description": "Retrieves a specific Service Adjustment based on the provided ID for the current user's account.  The returned adjustment provides details about any modifications or updates made to the user's service.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_adjustment_id",
            "in": "path",
            "description": "ID of the Service Adjustment to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Service Adjustment Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ServiceAdjustmentSuccessfulRetrieveResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "proxy_replacements": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/ProxyReplacement"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Service Adjustment Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/service_adjustment/search": {
      "get": {
        "tags": [
          "Service Adjustment"
        ],
        "summary": "Search Service Adjustments",
        "description": "Search Service Adjustments on the customer account using various filters.  Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "query",
            "description": "ID of the invoice",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "query",
            "description": "Service ID associated with the service adjustment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_adjustment_id",
            "in": "query",
            "description": "ID of the service adjustment",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "service_adjustment_type",
            "in": "query",
            "description": "Type of the service adjustment",
            "schema": {
              "type": "string",
              "enum": [
                "ingestion",
                "fulfillment",
                "update",
                "proxy_replacement",
                "extension"
              ]
            }
          },
          {
            "name": "service_adjustment_status",
            "in": "query",
            "description": "Current status of the service adjustment",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "complete",
                "failed"
              ]
            }
          },
          {
            "name": "service_adjustment_is_administrator",
            "in": "query",
            "description": "Whether the adjustment was made by an administrator",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "service_adjustment_is_automatic",
            "in": "query",
            "description": "Whether the adjustment was made automatically",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "service_adjustment_is_customer",
            "in": "query",
            "description": "Whether the adjustment was made by a customer",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "service_adjustment_creation_datetime",
            "in": "query",
            "description": "Datetime the service adjustment was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "service_adjustment_last_update_datetime",
            "in": "query",
            "description": "Datetime the service adjustment was last updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Service Adjustment search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ServiceAdjustmentSuccessfulSearchResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "proxy_replacements": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/components/schemas/ProxyReplacement"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/subdivision/retrieve/{subdivision_id}": {
      "get": {
        "tags": [
          "Subdivision"
        ],
        "summary": "Retrieve Subdivision",
        "description": "Retrieves a specific Subdivision.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdivision_id",
            "in": "path",
            "description": "ID of the Subdivision to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Subdivision Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SubdivisionSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Subdivision Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/subdivision/search": {
      "get": {
        "tags": [
          "Subdivision"
        ],
        "summary": "Search Subdivision",
        "description": "Search Subdivision entries using various filters. This endpoint allows users to query subdivisions based on specific attributes.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdivision_id",
            "in": "query",
            "description": "Unique identifier of the Subdivision",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdivision_name",
            "in": "query",
            "description": "Name of the Subdivision",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_id",
            "in": "query",
            "description": "Country identifier to which the Subdivision belongs",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subdivision_alias",
            "in": "query",
            "description": "Alias or alternative name for the Subdivision",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Subdivision search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SubdivisionSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/subscription_schedule/delete/{subscription_schedule_id}": {
      "delete": {
        "tags": [
          "Subscription Schedule"
        ],
        "summary": "Delete Subscription Schedule",
        "description": "Allows a user to delete an existing Subscription Schedule associated with their account.  The system sets the status of the Subscription Schedule to \"deleted\".\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_schedule_id",
            "in": "path",
            "description": "ID of the Subscription Schedule to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription Schedule Successfully Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionScheduleSuccessfulDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No Subscription Schedule with this ID",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/subscription_schedule/retrieve/{subscription_schedule_id}": {
      "get": {
        "tags": [
          "Subscription Schedule"
        ],
        "summary": "Retrieve Subscription Schedule",
        "description": "Retrieves a specific Subscription Schedule based on the provided ID for the current user's account.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_schedule_id",
            "in": "path",
            "description": "ID of the Subscription Schedule to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Subscription Schedule Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SubscriptionScheduleSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Subscription Schedule Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/subscription_schedule/search": {
      "get": {
        "tags": [
          "Subscription Schedule"
        ],
        "summary": "Search Subscription Schedules",
        "description": "Search subscription schedule entries on the customer account using various filters, including details from associated service subscriptions. Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_schedule_id",
            "in": "query",
            "description": "ID of the Subscription Schedule",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_subscription_id",
            "in": "query",
            "description": "ID of the associated Service Subscription",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_schedule_type",
            "in": "query",
            "description": "Type of the Subscription Schedule",
            "schema": {
              "type": "string",
              "enum": [
                "end_of_introductory_offer",
                "change_price",
                "increase_quantity",
                "decrease_quantity",
                "increase_quantity_change_price",
                "decrease_quantity_change_price"
              ]
            }
          },
          {
            "name": "subscription_schedule_status",
            "in": "query",
            "description": "Status of the Subscription Schedule",
            "schema": {
              "type": "string",
              "enum": [
                "not_started",
                "active",
                "completed",
                "released",
                "canceled"
              ]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Subscription Schedule search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SubscriptionScheduleSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/transaction/retrieve/{transaction_id}": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Retrieve Transaction",
        "description": "Retrieves a specific Transaction based on the provided ID for the current user's account.  Provides details about any specific financial or data movement associated with the user's account.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_id",
            "in": "path",
            "description": "ID of the Transaction to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Transaction Retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TransactionSuccessfulRetrieveResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Transaction Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/NotFoundResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/transaction/search": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Search Transactions",
        "description": "Search Transactions on the customer account using various filters.  Operations including max_, min_ and like_ are supported.\n",
        "parameters": [
          {
            "name": "X-Application-Forwarded-Client-IP-Address",
            "in": "header",
            "description": "Client IP address forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Application-Forwarded-Client-User-Agent",
            "in": "header",
            "description": "Client User-Agent forwarded by the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_id",
            "in": "query",
            "description": "ID of the Transaction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "query",
            "description": "ID of the associated Invoice",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_status",
            "in": "query",
            "description": "Status of the Transaction",
            "schema": {
              "type": "string",
              "enum": [
                "processing",
                "succeeded",
                "failed",
                "refunded"
              ]
            }
          },
          {
            "name": "transaction_amount",
            "in": "query",
            "description": "Amount of the Transaction",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "transaction_refund_reason",
            "in": "query",
            "description": "Reason for Transaction refund, if applicable",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_method",
            "in": "query",
            "description": "Method used for the Transaction (e.g., cryptocurrency)",
            "schema": {
              "type": "string",
              "enum": [
                "card",
                "cryptocurrency"
              ]
            }
          },
          {
            "name": "transaction_processor",
            "in": "query",
            "description": "Processor used for the Transaction",
            "schema": {
              "type": "string",
              "enum": [
                "stripe",
                "bitpay",
                "coinpayments"
              ]
            }
          },
          {
            "name": "transaction_currency",
            "in": "query",
            "description": "Currency of the Transaction (e.g., XRP)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_creation_datetime",
            "in": "query",
            "description": "Datetime the Transaction was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "transaction_last_update_datetime",
            "in": "query",
            "description": "Datetime the Transaction was last updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Key for sorting or random.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Transaction search",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TransactionSuccessfulSearchResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ]
      }
    },
    "/private/user/utilities/geocode": {
      "post": {
        "tags": [
          "Utilities"
        ],
        "summary": "Geocode Address",
        "description": "This endpoint takes various components of an address, such as address lines, subdivision name,  ISO country code, and zip code, then returns a geocoded address. The geocoded address includes  formatted components and the full address in a structured format. The address_line_two field is\n",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type for the request body as application/json.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "requestBody": {
          "description": "The components of the address to be geocoded.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "address_line_one",
                  "country_id",
                  "subdivision_name",
                  "zip_code"
                ],
                "type": "object",
                "properties": {
                  "address_line_one": {
                    "type": "string",
                    "description": "The first line of the address, typically containing the street and number."
                  },
                  "address_line_two": {
                    "type": "string",
                    "description": "The second line of the address, if applicable."
                  },
                  "country_id": {
                    "type": "string",
                    "description": "ISO Country Code [(ISO 3166-1 alpha-2)](https://www.iban.com/country-codes)."
                  },
                  "subdivision_name": {
                    "type": "string",
                    "description": "ISO Country Code [(ISO 3166-2)](https://unece.org/trade/cefact/unlocode-code-list-country-and-territory)."
                  },
                  "zip_code": {
                    "type": "string",
                    "description": "The postal or zip code for the address."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully geocoded the address and returned the formatted data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "address_line_one": {
                          "type": "string",
                          "description": "The first line of the geocoded address."
                        },
                        "address_line_two": {
                          "type": "string",
                          "description": "The second line of the geocoded address, if applicable."
                        },
                        "country_id": {
                          "type": "string",
                          "description": "The ISO country code of the geocoded address."
                        },
                        "formatted_address": {
                          "type": "string",
                          "description": "The full, formatted address."
                        },
                        "subdivision_name": {
                          "type": "string",
                          "description": "The subdivision name of the geocoded address (e.g., city or locality)."
                        },
                        "zip_code": {
                          "type": "string",
                          "description": "The postal or zip code of the geocoded address."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. One or more parameters were missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UnauthorizedResponse"
                    }
                  ]
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MethodNotAllowedResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "BearerAuth": []
          },
          {
            "ApplicationAPIPrivateKey": [],
            "ApplicationAPIPublicKey": [],
            "CookieAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "ApiKey": {
        "type": "object",
        "properties": {
          "api_key_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-14T18:30:00Z"
          },
          "api_key_id": {
            "type": "integer",
            "example": 1
          },
          "api_key_label": {
            "type": "string",
            "example": "My Application"
          },
          "api_key_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-15T18:30:00Z"
          },
          "api_key_private_key_preview": {
            "type": "string",
            "example": "abc1234***"
          },
          "api_key_public_key": {
            "type": "string",
            "example": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42"
          },
          "api_key_scope": {
            "type": "string",
            "example": ""
          },
          "api_key_status": {
            "type": "string",
            "example": "active",
            "enum": [
              "active",
              "deleted"
            ]
          }
        }
      },
      "ApiKeySuccessfulDeleteResponse": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "array",
            "description": "Array of deleted ApiKey IDs.",
            "items": {
              "type": "integer"
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the deletion."
          }
        },
        "description": "ApiKey deletion was successful.",
        "example": {
          "deleted": [
            123
          ],
          "message": "ApiKey deletion successful."
        }
      },
      "ApiKeySuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "api_key_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-14T18:30:00Z"
              },
              "api_key_id": {
                "type": "integer",
                "example": 1
              },
              "api_key_label": {
                "type": "string",
                "example": "My Application"
              },
              "api_key_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-15T18:30:00Z"
              },
              "api_key_private_key_preview": {
                "type": "string",
                "example": "abc1234***"
              },
              "api_key_public_key": {
                "type": "string",
                "example": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42"
              },
              "api_key_scope": {
                "type": "string",
                "example": ""
              },
              "api_key_status": {
                "type": "string",
                "example": "active",
                "enum": [
                  "active",
                  "deleted"
                ]
              }
            },
            "description": "Retrieved ApiKey item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "ApiKey retrieve was successful.",
        "example": {
          "data": {
            "api_key_creation_datetime": "2023-09-14T18:30:00Z",
            "api_key_id": "1",
            "api_key_label": "My Application",
            "api_key_last_update_datetime": "2023-09-15T18:30:00Z",
            "api_key_private_key_preview": "abc1234***",
            "api_key_public_key": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42",
            "api_key_scope": {
              "operation_type": "all",
              "operations": "all"
            },
            "api_key_status": "active"
          },
          "message": "ApiKey successfully retrieved."
        }
      },
      "ApiKeySuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of ApiKey items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of ApiKey items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "api_key_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-14T18:30:00Z"
                },
                "api_key_id": {
                  "type": "integer",
                  "example": 1
                },
                "api_key_label": {
                  "type": "string",
                  "example": "My Application"
                },
                "api_key_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-15T18:30:00Z"
                },
                "api_key_private_key_preview": {
                  "type": "string",
                  "example": "abc1234***"
                },
                "api_key_public_key": {
                  "type": "string",
                  "example": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42"
                },
                "api_key_scope": {
                  "type": "string",
                  "example": ""
                },
                "api_key_status": {
                  "type": "string",
                  "example": "active",
                  "enum": [
                    "active",
                    "deleted"
                  ]
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "ApiKey search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "api_key_creation_datetime": "2023-09-14T18:30:00Z",
              "api_key_id": "1",
              "api_key_label": "My Application",
              "api_key_last_update_datetime": "2023-09-15T18:30:00Z",
              "api_key_private_key_preview": "abc1234***",
              "api_key_public_key": "2f84260dfdd60454f823158b00e60757b81d51e14954cc4ea4b91004d5c46c42",
              "api_key_scope": {
                "operation_type": "all",
                "operations": "all"
              },
              "api_key_status": "active"
            }
          ],
          "message": "ApiKey search successful."
        }
      },
      "ApiRequestSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "api_request_client_ip_address": {
                "type": "string",
                "example": "122.33.24.33"
              },
              "api_request_client_user_agent": {
                "type": "string",
                "example": "Chrome/2023.5.8"
              },
              "api_request_creation_datetime": {
                "type": "string",
                "example": "2023-11-21 13:55:05.549007"
              },
              "api_request_duration": {
                "type": "number",
                "example": 251.49846076965332
              },
              "api_request_id": {
                "type": "string",
                "example": "450337744011109b4275783f1b01e4fe"
              },
              "api_request_method": {
                "type": "string",
                "example": "GET"
              },
              "api_request_path": {
                "type": "string",
                "example": "/1.0/private/user/api_request/search"
              },
              "api_request_status_code": {
                "type": "integer",
                "example": 200
              }
            },
            "description": "Data containing API request details"
          },
          "message": {
            "type": "string",
            "description": "Description of the response message",
            "example": "API Request retrieve successful."
          }
        },
        "description": "Successful API Request Retrieve",
        "example": {
          "data": {
            "api_request_client_ip_address": "122.33.24.33",
            "api_request_client_user_agent": "Chrome/2023.5.8",
            "api_request_creation_datetime": "2023-11-21 13:55:05.549007",
            "api_request_duration": 251.49846076965332,
            "api_request_id": "450337744011109b4275783f1b01e4fe",
            "api_request_method": "GET",
            "api_request_path": "/1.0/private/user/api_request/search",
            "api_request_status_code": 404
          },
          "message": "API Request retrieve successful."
        }
      },
      "ApiRequestSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of API requests returned",
            "example": 2
          },
          "data": {
            "type": "array",
            "description": "Array of API request data objects",
            "items": {
              "type": "object",
              "properties": {
                "api_request_client_ip_address": {
                  "type": "string",
                  "example": "122.33.24.33"
                },
                "api_request_client_user_agent": {
                  "type": "string",
                  "example": "Chrome/2023.5.8"
                },
                "api_request_creation_datetime": {
                  "type": "string",
                  "example": "2023-11-21 13:03:03.489068"
                },
                "api_request_duration": {
                  "type": "number",
                  "example": 511.2912654876709
                },
                "api_request_id": {
                  "type": "string",
                  "example": "f80a7ddca2129da755204beb4b8d2d91"
                },
                "api_request_method": {
                  "type": "string",
                  "example": "GET"
                },
                "api_request_path": {
                  "type": "string",
                  "example": "/1.0/private/user/api_request/search"
                },
                "api_request_status_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Description of the response message",
            "example": "API Request search successful."
          }
        },
        "description": "Successful API Request Search",
        "example": {
          "count": 2,
          "data": [
            {
              "api_request_client_ip_address": "122.33.24.33",
              "api_request_client_user_agent": "Chrome/2023.5.8",
              "api_request_creation_datetime": "2023-11-21 13:03:03.489068",
              "api_request_duration": 511.2912654876709,
              "api_request_id": "f80a7ddca2129da755204beb4b8d2d91",
              "api_request_method": "GET",
              "api_request_path": "/1.0/private/user/api_request/search",
              "api_request_status_code": 200
            },
            {
              "api_request_client_ip_address": "122.33.24.33",
              "api_request_client_user_agent": "Chrome/2023.5.8",
              "api_request_creation_datetime": "2023-11-21 13:03:51.635727",
              "api_request_duration": 364.6986484527588,
              "api_request_id": "76950bf1aa4f1962ec758e905546d673",
              "api_request_method": "GET",
              "api_request_path": "/1.0/private/user/api_request/search",
              "api_request_status_code": 200
            }
          ],
          "message": "API Request search successful."
        }
      },
      "Asn": {
        "type": "object",
        "properties": {
          "asn_id": {
            "type": "integer",
            "example": 13335
          },
          "asn_ip_address_count": {
            "type": "integer",
            "example": 122002
          },
          "asn_name": {
            "type": "string",
            "example": "Cloudflare, Inc."
          },
          "asn_rir": {
            "type": "string",
            "example": "apnic",
            "enum": [
              "arin",
              "ripe",
              "apnic",
              "lacnic",
              "afrinic"
            ]
          },
          "asn_type": {
            "type": "string",
            "example": "hosting",
            "enum": [
              "business",
              "cdn",
              "edu",
              "gov",
              "hosting"
            ]
          },
          "country_id": {
            "type": "string",
            "example": "us"
          }
        }
      },
      "AsnSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "asn_id": {
                "type": "integer",
                "example": 13335
              },
              "asn_ip_address_count": {
                "type": "integer",
                "example": 122002
              },
              "asn_name": {
                "type": "string",
                "example": "Cloudflare, Inc."
              },
              "asn_rir": {
                "type": "string",
                "example": "apnic",
                "enum": [
                  "arin",
                  "ripe",
                  "apnic",
                  "lacnic",
                  "afrinic"
                ]
              },
              "asn_type": {
                "type": "string",
                "example": "hosting",
                "enum": [
                  "business",
                  "cdn",
                  "edu",
                  "gov",
                  "hosting"
                ]
              },
              "country_id": {
                "type": "string",
                "example": "us"
              }
            },
            "description": "Retrieved Asn item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "Asn retrieve was successful.",
        "example": {
          "data": {
            "asn_id": 13335,
            "asn_ip_address_count": 122002,
            "asn_name": "Cloudflare, Inc.",
            "asn_rir": "apnic",
            "asn_type": "hosting",
            "country_id": "us"
          },
          "message": "Asn successfully retrieved."
        }
      },
      "AsnSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of Asn items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of Asn items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "asn_id": {
                  "type": "integer",
                  "example": 13335
                },
                "asn_ip_address_count": {
                  "type": "integer",
                  "example": 122002
                },
                "asn_name": {
                  "type": "string",
                  "example": "Cloudflare, Inc."
                },
                "asn_rir": {
                  "type": "string",
                  "example": "apnic",
                  "enum": [
                    "arin",
                    "ripe",
                    "apnic",
                    "lacnic",
                    "afrinic"
                  ]
                },
                "asn_type": {
                  "type": "string",
                  "example": "hosting",
                  "enum": [
                    "business",
                    "cdn",
                    "edu",
                    "gov",
                    "hosting"
                  ]
                },
                "country_id": {
                  "type": "string",
                  "example": "us"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "Asn search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "asn_id": 13335,
              "asn_ip_address_count": 122002,
              "asn_name": "Cloudflare, Inc.",
              "asn_rir": "apnic",
              "asn_type": "hosting",
              "country_id": "us"
            }
          ],
          "message": "Asn search successful."
        }
      },
      "BadRequestResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Bad Request"
          },
          "error_id": {
            "type": "string",
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70"
          },
          "message": {
            "type": "string",
            "description": "Description of the error",
            "example": "The data provided does not match the expected format."
          }
        },
        "description": "Bad Request",
        "example": {
          "error": "Bad Request",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "The data provided does not match the expected format."
        }
      },
      "BalanceTransaction": {
        "type": "object",
        "properties": {
          "balance_transaction_amount": {
            "type": "integer",
            "example": -100
          },
          "balance_transaction_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-14T18:30:00Z"
          },
          "balance_transaction_id": {
            "type": "string",
            "example": "txn_1Nfeb9B2BUlqim5lnTF07bkM"
          },
          "balance_transaction_is_administrator": {
            "type": "boolean",
            "example": false
          },
          "balance_transaction_is_out_of_band": {
            "type": "boolean",
            "example": false
          },
          "balance_transaction_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-15T18:30:00Z"
          },
          "balance_transaction_reason": {
            "type": "string",
            "example": "top_up",
            "enum": [
              "top_up",
              "adjustment",
              "applied_to_invoice",
              "credit_note",
              "invoice_too_small",
              "invoice_too_large",
              "unapplied_from_invoice",
              "unspent_receiver_credit"
            ]
          },
          "invoice_id": {
            "type": "string",
            "example": "in_1NpRIvB2BUlqim5lN4v3URka"
          }
        }
      },
      "BalanceTransactionSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "balance_transaction_amount": {
                "type": "integer",
                "example": -100
              },
              "balance_transaction_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-14T18:30:00Z"
              },
              "balance_transaction_id": {
                "type": "string",
                "example": "txn_1Nfeb9B2BUlqim5lnTF07bkM"
              },
              "balance_transaction_is_administrator": {
                "type": "boolean",
                "example": false
              },
              "balance_transaction_is_out_of_band": {
                "type": "boolean",
                "example": false
              },
              "balance_transaction_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-15T18:30:00Z"
              },
              "balance_transaction_reason": {
                "type": "string",
                "example": "top_up",
                "enum": [
                  "top_up",
                  "adjustment",
                  "applied_to_invoice",
                  "credit_note",
                  "invoice_too_small",
                  "invoice_too_large",
                  "unapplied_from_invoice",
                  "unspent_receiver_credit"
                ]
              },
              "invoice_id": {
                "type": "string",
                "example": "in_1NpRIvB2BUlqim5lN4v3URka"
              }
            },
            "description": "Retrieved BalanceTransaction item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "BalanceTransaction retrieve was successful.",
        "example": {
          "data": {
            "balance_transaction_amount": -100,
            "balance_transaction_creation_datetime": "2023-09-14T18:30:00Z",
            "balance_transaction_id": "txn_1Nfeb9B2BUlqim5lnTF07bkM",
            "balance_transaction_is_administrator": false,
            "balance_transaction_is_out_of_band": false,
            "balance_transaction_last_update_datetime": "2023-09-15T18:30:00Z",
            "balance_transaction_reason": "top_up",
            "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka"
          },
          "message": "BalanceTransaction successfully retrieved."
        }
      },
      "BalanceTransactionSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of BalanceTransaction items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of BalanceTransaction items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "balance_transaction_amount": {
                  "type": "integer",
                  "example": -100
                },
                "balance_transaction_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-14T18:30:00Z"
                },
                "balance_transaction_id": {
                  "type": "string",
                  "example": "txn_1Nfeb9B2BUlqim5lnTF07bkM"
                },
                "balance_transaction_is_administrator": {
                  "type": "boolean",
                  "example": false
                },
                "balance_transaction_is_out_of_band": {
                  "type": "boolean",
                  "example": false
                },
                "balance_transaction_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-15T18:30:00Z"
                },
                "balance_transaction_reason": {
                  "type": "string",
                  "example": "top_up",
                  "enum": [
                    "top_up",
                    "adjustment",
                    "applied_to_invoice",
                    "credit_note",
                    "invoice_too_small",
                    "invoice_too_large",
                    "unapplied_from_invoice",
                    "unspent_receiver_credit"
                  ]
                },
                "invoice_id": {
                  "type": "string",
                  "example": "in_1NpRIvB2BUlqim5lN4v3URka"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "BalanceTransaction search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "balance_transaction_amount": -100,
              "balance_transaction_creation_datetime": "2023-09-14T18:30:00Z",
              "balance_transaction_id": "txn_1Nfeb9B2BUlqim5lnTF07bkM",
              "balance_transaction_is_administrator": false,
              "balance_transaction_is_out_of_band": false,
              "balance_transaction_last_update_datetime": "2023-09-15T18:30:00Z",
              "balance_transaction_reason": "top_up",
              "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka"
            }
          ],
          "message": "BalanceTransaction search successful."
        }
      },
      "City": {
        "type": "object",
        "properties": {
          "city_alias": {
            "type": "string",
            "example": "City of Lights"
          },
          "city_creation_datetime": {
            "type": "string",
            "format": "date-time"
          },
          "city_example_postcode": {
            "type": "string",
            "example": "330122"
          },
          "city_id": {
            "type": "integer",
            "example": 123
          },
          "city_is_popular": {
            "type": "boolean",
            "example": true
          },
          "city_last_update_datetime": {
            "type": "string",
            "format": "date-time"
          },
          "city_latitude": {
            "type": "number",
            "example": 4.1221
          },
          "city_longitude": {
            "type": "number",
            "example": -1.333
          },
          "city_name": {
            "type": "string",
            "example": "Paris"
          },
          "city_population": {
            "type": "integer",
            "example": 122201
          },
          "city_timezone": {
            "type": "string",
            "example": "Europe/Paris"
          },
          "subdivision_id": {
            "type": "string",
            "example": "Ile-de-France"
          }
        }
      },
      "CitySuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "city_alias": {
                "type": "string",
                "example": "City of Lights"
              },
              "city_creation_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "city_example_postcode": {
                "type": "string",
                "example": "330122"
              },
              "city_id": {
                "type": "integer",
                "example": 123
              },
              "city_is_popular": {
                "type": "boolean",
                "example": true
              },
              "city_last_update_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "city_latitude": {
                "type": "number",
                "example": 4.1221
              },
              "city_longitude": {
                "type": "number",
                "example": -1.333
              },
              "city_name": {
                "type": "string",
                "example": "Paris"
              },
              "city_population": {
                "type": "integer",
                "example": 122201
              },
              "city_timezone": {
                "type": "string",
                "example": "Europe/Paris"
              },
              "subdivision_id": {
                "type": "string",
                "example": "Ile-de-France"
              }
            },
            "description": "Retrieved City item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "City retrieve was successful.",
        "example": {
          "data": {
            "city_alias": "City of Lights",
            "city_example_postcode": "330122",
            "city_id": 123,
            "city_is_popular": true,
            "city_latitude": 4.1221,
            "city_longitude": -1.333,
            "city_name": "Paris",
            "city_population": 122201,
            "city_timezone": "Europe/Paris",
            "subdivision_id": "Ile-de-France"
          },
          "message": "City successfully retrieved."
        }
      },
      "CitySuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of City items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of City items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "city_alias": {
                  "type": "string",
                  "example": "City of Lights"
                },
                "city_creation_datetime": {
                  "type": "string",
                  "format": "date-time"
                },
                "city_example_postcode": {
                  "type": "string",
                  "example": "330122"
                },
                "city_id": {
                  "type": "integer",
                  "example": 123
                },
                "city_is_popular": {
                  "type": "boolean",
                  "example": true
                },
                "city_last_update_datetime": {
                  "type": "string",
                  "format": "date-time"
                },
                "city_latitude": {
                  "type": "number",
                  "example": 4.1221
                },
                "city_longitude": {
                  "type": "number",
                  "example": -1.333
                },
                "city_name": {
                  "type": "string",
                  "example": "Paris"
                },
                "city_population": {
                  "type": "integer",
                  "example": 122201
                },
                "city_timezone": {
                  "type": "string",
                  "example": "Europe/Paris"
                },
                "subdivision_id": {
                  "type": "string",
                  "example": "Ile-de-France"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "City search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "city_alias": "City of Lights",
              "city_example_postcode": "330122",
              "city_id": 123,
              "city_is_popular": true,
              "city_latitude": 4.1221,
              "city_longitude": -1.333,
              "city_name": "Paris",
              "city_population": 122201,
              "city_timezone": "Europe/Paris",
              "subdivision_id": "Ile-de-France"
            }
          ],
          "message": "City search successful."
        }
      },
      "ConflictResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Conflict"
          },
          "error_id": {
            "type": "string",
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70"
          },
          "message": {
            "type": "string",
            "description": "Description of the error",
            "example": "There is a conflict with another resource."
          }
        },
        "description": "Conflict",
        "example": {
          "error": "Conflict",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "There is a conflict with another resource."
        }
      },
      "Continent": {
        "type": "object",
        "properties": {
          "continent_alias": {
            "type": "string",
            "example": "eu"
          },
          "continent_id": {
            "type": "string",
            "example": "eu"
          },
          "continent_name": {
            "type": "string",
            "example": "Europe"
          }
        }
      },
      "ContinentSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "continent_alias": {
                "type": "string",
                "example": "eu"
              },
              "continent_id": {
                "type": "string",
                "example": "eu"
              },
              "continent_name": {
                "type": "string",
                "example": "Europe"
              }
            },
            "description": "Retrieved Continent item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "Continent retrieve was successful.",
        "example": {
          "data": {
            "continent_alias": "eu",
            "continent_id": "eu",
            "continent_name": "Europe"
          },
          "message": "Continent successfully retrieved."
        }
      },
      "ContinentSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of Continent items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of Continent items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "continent_alias": {
                  "type": "string",
                  "example": "eu"
                },
                "continent_id": {
                  "type": "string",
                  "example": "eu"
                },
                "continent_name": {
                  "type": "string",
                  "example": "Europe"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "Continent search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "continent_alias": "eu",
              "continent_id": "eu",
              "continent_name": "Europe"
            }
          ],
          "message": "Continent search successful."
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "continent_id": {
            "type": "string",
            "example": "eu"
          },
          "country_alias": {
            "type": "string",
            "example": "fr"
          },
          "country_id": {
            "type": "string",
            "example": "fr"
          },
          "country_is_european_union": {
            "type": "boolean",
            "example": true
          },
          "country_name": {
            "type": "string",
            "example": "France"
          }
        }
      },
      "CountrySuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "continent_id": {
                "type": "string",
                "example": "eu"
              },
              "country_alias": {
                "type": "string",
                "example": "fr"
              },
              "country_id": {
                "type": "string",
                "example": "fr"
              },
              "country_is_european_union": {
                "type": "boolean",
                "example": true
              },
              "country_name": {
                "type": "string",
                "example": "France"
              }
            },
            "description": "Retrieved Country item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "Country retrieve was successful.",
        "example": {
          "data": {
            "continent_id": "eu",
            "country_alias": "fr",
            "country_id": "fr",
            "country_is_european_union": true,
            "country_name": "France"
          },
          "message": "Country successfully retrieved."
        }
      },
      "CountrySuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of Country items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of Country items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "continent_id": {
                  "type": "string",
                  "example": "eu"
                },
                "country_alias": {
                  "type": "string",
                  "example": "fr"
                },
                "country_id": {
                  "type": "string",
                  "example": "fr"
                },
                "country_is_european_union": {
                  "type": "boolean",
                  "example": true
                },
                "country_name": {
                  "type": "string",
                  "example": "France"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "Country search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "continent_id": "eu",
              "country_alias": "fr",
              "country_id": "fr",
              "country_is_european_union": true,
              "country_name": "France"
            }
          ],
          "message": "Country search successful."
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "active_residential_service_id": {
            "type": "string",
            "example": "-8782"
          },
          "country_id": {
            "type": "string",
            "example": "us"
          },
          "country_id_billing": {
            "type": "string",
            "example": "gb"
          },
          "credit_balance": {
            "type": "integer",
            "example": 1245
          },
          "customer_billing_line_one": {
            "type": "string",
            "example": "10"
          },
          "customer_billing_line_two": {
            "type": "string",
            "example": "Downing Street"
          },
          "customer_billing_name": {
            "type": "string",
            "example": "Mr Prime Minister"
          },
          "customer_billing_subdivision_name": {
            "type": "string",
            "example": "London"
          },
          "customer_billing_zip_code": {
            "type": "string",
            "example": "SW1A 2AB"
          },
          "customer_creation_datetime": {
            "type": "string",
            "format": "date-time"
          },
          "customer_discord_id": {
            "type": "string",
            "example": "dis_ckf3malOP1s"
          },
          "customer_discord_oauth_id": {
            "type": "string",
            "example": "0xfOavU6OUtXxhJ8"
          },
          "customer_email_address": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "customer_email_two_factor_authentication": {
            "type": "boolean",
            "example": true
          },
          "customer_first_name": {
            "type": "string",
            "example": "John"
          },
          "customer_google_oauth_id": {
            "type": "string",
            "example": "7Z6CbaOsoDg9AYds"
          },
          "customer_id": {
            "type": "integer",
            "example": 1
          },
          "customer_iso_language_code": {
            "type": "string",
            "example": "en"
          },
          "customer_last_login_datetime": {
            "type": "string",
            "format": "date-time"
          },
          "customer_last_name": {
            "type": "string",
            "example": "Doe"
          },
          "customer_last_update_datetime": {
            "type": "string",
            "format": "date-time"
          },
          "customer_phone_number": {
            "type": "string",
            "example": "+1234567890"
          },
          "customer_profile_image_url": {
            "type": "string",
            "example": "https://example.com/image.jpg"
          },
          "customer_requires_information_confirm": {
            "type": "boolean",
            "example": false
          },
          "customer_requires_password_change": {
            "type": "boolean",
            "example": false
          },
          "proxy_count": {
            "type": "integer",
            "example": 100
          },
          "residential_bytes_left": {
            "type": "integer",
            "example": 10737418240
          }
        }
      },
      "CustomerSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "active_residential_service_id": {
                "type": "string",
                "example": "-8782"
              },
              "country_id": {
                "type": "string",
                "example": "us"
              },
              "country_id_billing": {
                "type": "string",
                "example": "gb"
              },
              "credit_balance": {
                "type": "integer",
                "example": 1245
              },
              "customer_billing_line_one": {
                "type": "string",
                "example": "10"
              },
              "customer_billing_line_two": {
                "type": "string",
                "example": "Downing Street"
              },
              "customer_billing_name": {
                "type": "string",
                "example": "Mr Prime Minister"
              },
              "customer_billing_subdivision_name": {
                "type": "string",
                "example": "London"
              },
              "customer_billing_zip_code": {
                "type": "string",
                "example": "SW1A 2AB"
              },
              "customer_creation_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "customer_discord_id": {
                "type": "string",
                "example": "dis_ckf3malOP1s"
              },
              "customer_discord_oauth_id": {
                "type": "string",
                "example": "0xfOavU6OUtXxhJ8"
              },
              "customer_email_address": {
                "type": "string",
                "example": "john.doe@example.com"
              },
              "customer_email_two_factor_authentication": {
                "type": "boolean",
                "example": true
              },
              "customer_first_name": {
                "type": "string",
                "example": "John"
              },
              "customer_google_oauth_id": {
                "type": "string",
                "example": "7Z6CbaOsoDg9AYds"
              },
              "customer_id": {
                "type": "integer",
                "example": 1
              },
              "customer_iso_language_code": {
                "type": "string",
                "example": "en"
              },
              "customer_last_login_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "customer_last_name": {
                "type": "string",
                "example": "Doe"
              },
              "customer_last_update_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "customer_phone_number": {
                "type": "string",
                "example": "+1234567890"
              },
              "customer_profile_image_url": {
                "type": "string",
                "example": "https://example.com/image.jpg"
              },
              "customer_requires_information_confirm": {
                "type": "boolean",
                "example": false
              },
              "customer_requires_password_change": {
                "type": "boolean",
                "example": false
              },
              "proxy_count": {
                "type": "integer",
                "example": 100
              },
              "residential_bytes_left": {
                "type": "integer",
                "example": 10737418240
              }
            },
            "description": "Retrieved Customer item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "Customer retrieve was successful.",
        "example": {
          "data": {
            "active_residential_service_id": -8782,
            "country_id": "us",
            "country_id_billing": "gb",
            "credit_balance": 1245,
            "customer_billing_line_one": "10",
            "customer_billing_line_two": "Downing Street",
            "customer_billing_name": "Mr Prime Minister",
            "customer_billing_subdivision_name": "London",
            "customer_billing_zip_code": "SW1A 2AB",
            "customer_creation_datetime": "2023-09-01 10:00:00",
            "customer_discord_id": "dis_ckf3malOP1s",
            "customer_discord_oauth_id": "0xfOavU6OUtXxhJ8",
            "customer_email_address": "john.doe@example.com",
            "customer_email_two_factor_authentication": true,
            "customer_first_name": "John",
            "customer_google_oauth_id": "7Z6CbaOsoDg9AYds",
            "customer_id": 1,
            "customer_iso_language_code": "en",
            "customer_last_login_datetime": "2023-09-10 10:00:00",
            "customer_last_name": "Doe",
            "customer_last_update_datetime": "2023-09-10 11:00:00",
            "customer_phone_number": "+1234567890",
            "customer_profile_image_url": "https://example.com/image.jpg",
            "customer_requires_information_confirm": false,
            "customer_requires_password_change": false,
            "proxy_count": 100,
            "residential_bytes_left": 10737418240
          },
          "message": "Customer successfully retrieved."
        }
      },
      "CustomerSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of Customer items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of Customer items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "active_residential_service_id": {
                  "type": "string",
                  "example": "-8782"
                },
                "country_id": {
                  "type": "string",
                  "example": "us"
                },
                "country_id_billing": {
                  "type": "string",
                  "example": "gb"
                },
                "credit_balance": {
                  "type": "integer",
                  "example": 1245
                },
                "customer_billing_line_one": {
                  "type": "string",
                  "example": "10"
                },
                "customer_billing_line_two": {
                  "type": "string",
                  "example": "Downing Street"
                },
                "customer_billing_name": {
                  "type": "string",
                  "example": "Mr Prime Minister"
                },
                "customer_billing_subdivision_name": {
                  "type": "string",
                  "example": "London"
                },
                "customer_billing_zip_code": {
                  "type": "string",
                  "example": "SW1A 2AB"
                },
                "customer_creation_datetime": {
                  "type": "string",
                  "format": "date-time"
                },
                "customer_discord_id": {
                  "type": "string",
                  "example": "dis_ckf3malOP1s"
                },
                "customer_discord_oauth_id": {
                  "type": "string",
                  "example": "0xfOavU6OUtXxhJ8"
                },
                "customer_email_address": {
                  "type": "string",
                  "example": "john.doe@example.com"
                },
                "customer_email_two_factor_authentication": {
                  "type": "boolean",
                  "example": true
                },
                "customer_first_name": {
                  "type": "string",
                  "example": "John"
                },
                "customer_google_oauth_id": {
                  "type": "string",
                  "example": "7Z6CbaOsoDg9AYds"
                },
                "customer_id": {
                  "type": "integer",
                  "example": 1
                },
                "customer_iso_language_code": {
                  "type": "string",
                  "example": "en"
                },
                "customer_last_login_datetime": {
                  "type": "string",
                  "format": "date-time"
                },
                "customer_last_name": {
                  "type": "string",
                  "example": "Doe"
                },
                "customer_last_update_datetime": {
                  "type": "string",
                  "format": "date-time"
                },
                "customer_phone_number": {
                  "type": "string",
                  "example": "+1234567890"
                },
                "customer_profile_image_url": {
                  "type": "string",
                  "example": "https://example.com/image.jpg"
                },
                "customer_requires_information_confirm": {
                  "type": "boolean",
                  "example": false
                },
                "customer_requires_password_change": {
                  "type": "boolean",
                  "example": false
                },
                "proxy_count": {
                  "type": "integer",
                  "example": 100
                },
                "residential_bytes_left": {
                  "type": "integer",
                  "example": 10737418240
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "Customer search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "active_residential_service_id": -8782,
              "country_id": "us",
              "country_id_billing": "gb",
              "credit_balance": 1245,
              "customer_billing_line_one": "10",
              "customer_billing_line_two": "Downing Street",
              "customer_billing_name": "Mr Prime Minister",
              "customer_billing_subdivision_name": "London",
              "customer_billing_zip_code": "SW1A 2AB",
              "customer_creation_datetime": "2023-09-01 10:00:00",
              "customer_discord_id": "dis_ckf3malOP1s",
              "customer_discord_oauth_id": "0xfOavU6OUtXxhJ8",
              "customer_email_address": "john.doe@example.com",
              "customer_email_two_factor_authentication": true,
              "customer_first_name": "John",
              "customer_google_oauth_id": "7Z6CbaOsoDg9AYds",
              "customer_id": 1,
              "customer_iso_language_code": "en",
              "customer_last_login_datetime": "2023-09-10 10:00:00",
              "customer_last_name": "Doe",
              "customer_last_update_datetime": "2023-09-10 11:00:00",
              "customer_phone_number": "+1234567890",
              "customer_profile_image_url": "https://example.com/image.jpg",
              "customer_requires_information_confirm": false,
              "customer_requires_password_change": false,
              "proxy_count": 100,
              "residential_bytes_left": 10737418240
            }
          ],
          "message": "Customer search successful."
        }
      },
      "ForbiddenResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Forbidden"
          },
          "error_id": {
            "type": "string",
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70"
          },
          "message": {
            "type": "string",
            "description": "Description of the error",
            "example": "You don't have the necessary permissions to access this resource."
          }
        },
        "description": "Forbidden",
        "example": {
          "error": "Forbidden",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "You don't have the necessary permissions to access this resource."
        }
      },
      "InternalServer": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Internal Server Error"
          },
          "error_id": {
            "type": "string",
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70"
          },
          "message": {
            "type": "string",
            "description": "Description of the error",
            "example": "The server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "description": "Internal Server Error",
        "example": {
          "error": "Internal Server Error",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "invoice_amount_paid": {
            "type": "integer",
            "example": 3
          },
          "invoice_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-14T18:30:00Z"
          },
          "invoice_discounts": {
            "type": "object",
            "properties": {},
            "example": "[{\"code\":\"DISC10\",\"amount\":0.3}]"
          },
          "invoice_due_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-15T18:30:00Z"
          },
          "invoice_id": {
            "type": "string",
            "example": "in_1NpRIvB2BUlqim5lN4v3URka"
          },
          "invoice_is_automatic_collection": {
            "type": "boolean",
            "example": true
          },
          "invoice_is_cart": {
            "type": "boolean",
            "example": true
          },
          "invoice_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-15T18:30:00Z"
          },
          "invoice_line_items": {
            "type": "object",
            "properties": {},
            "example": "[{\"item\":\"isp\",\"price\":3,\"quantity\":1}]"
          },
          "invoice_pdf": {
            "type": "string",
            "example": "https://invoice.stripe.com/inv123456.pdf"
          },
          "invoice_status": {
            "type": "string",
            "example": "paid",
            "enum": [
              "open",
              "paid",
              "void"
            ]
          },
          "invoice_total": {
            "type": "integer",
            "example": 3
          },
          "invoice_type": {
            "type": "string",
            "example": "stripe",
            "enum": [
              "stripe",
              "bitpay",
              "coinpayments",
              "internal"
            ]
          },
          "invoice_url": {
            "type": "string",
            "example": "https://invoice.stripe.com/i/acct_im5l/live_MTQ10200xkACQJDj?s=db"
          },
          "service_id": {
            "type": "string",
            "example": "169-1489-4251"
          }
        }
      },
      "InvoiceSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "invoice_amount_paid": {
                "type": "integer",
                "example": 3
              },
              "invoice_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-14T18:30:00Z"
              },
              "invoice_discounts": {
                "type": "object",
                "properties": {},
                "example": "[{\"code\":\"DISC10\",\"amount\":0.3}]"
              },
              "invoice_due_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-15T18:30:00Z"
              },
              "invoice_id": {
                "type": "string",
                "example": "in_1NpRIvB2BUlqim5lN4v3URka"
              },
              "invoice_is_automatic_collection": {
                "type": "boolean",
                "example": true
              },
              "invoice_is_cart": {
                "type": "boolean",
                "example": true
              },
              "invoice_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-15T18:30:00Z"
              },
              "invoice_line_items": {
                "type": "object",
                "properties": {},
                "example": "[{\"item\":\"isp\",\"price\":3,\"quantity\":1}]"
              },
              "invoice_pdf": {
                "type": "string",
                "example": "https://invoice.stripe.com/inv123456.pdf"
              },
              "invoice_status": {
                "type": "string",
                "example": "paid",
                "enum": [
                  "open",
                  "paid",
                  "void"
                ]
              },
              "invoice_total": {
                "type": "integer",
                "example": 3
              },
              "invoice_type": {
                "type": "string",
                "example": "stripe",
                "enum": [
                  "stripe",
                  "bitpay",
                  "coinpayments",
                  "internal"
                ]
              },
              "invoice_url": {
                "type": "string",
                "example": "https://invoice.stripe.com/i/acct_im5l/live_MTQ10200xkACQJDj?s=db"
              },
              "service_id": {
                "type": "string",
                "example": "169-1489-4251"
              }
            },
            "description": "Retrieved Invoice item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "Invoice retrieve was successful.",
        "example": {
          "data": {
            "invoice_amount_paid": 3,
            "invoice_creation_datetime": "2023-09-14T18:30:00Z",
            "invoice_discounts": "[{\"code\":\"DISC10\",\"amount\":0.3}]",
            "invoice_due_datetime": "2023-09-15T18:30:00Z",
            "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka",
            "invoice_is_automatic_collection": true,
            "invoice_is_cart": true,
            "invoice_last_update_datetime": "2023-09-15T18:30:00Z",
            "invoice_line_items": "[{\"item\":\"isp\",\"price\":3,\"quantity\":1}]",
            "invoice_pdf": "https://invoice.stripe.com/inv123456.pdf",
            "invoice_status": "paid",
            "invoice_total": 3,
            "invoice_type": "stripe",
            "invoice_url": "https://invoice.stripe.com/i/acct_im5l/live_MTQ10200xkACQJDj?s=db",
            "service_id": "169-1489-4251"
          },
          "message": "Invoice successfully retrieved."
        }
      },
      "InvoiceSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of Invoice items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of Invoice items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "invoice_amount_paid": {
                  "type": "integer",
                  "example": 3
                },
                "invoice_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-14T18:30:00Z"
                },
                "invoice_discounts": {
                  "type": "object",
                  "properties": {},
                  "example": "[{\"code\":\"DISC10\",\"amount\":0.3}]"
                },
                "invoice_due_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-15T18:30:00Z"
                },
                "invoice_id": {
                  "type": "string",
                  "example": "in_1NpRIvB2BUlqim5lN4v3URka"
                },
                "invoice_is_automatic_collection": {
                  "type": "boolean",
                  "example": true
                },
                "invoice_is_cart": {
                  "type": "boolean",
                  "example": true
                },
                "invoice_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-15T18:30:00Z"
                },
                "invoice_line_items": {
                  "type": "object",
                  "properties": {},
                  "example": "[{\"item\":\"isp\",\"price\":3,\"quantity\":1}]"
                },
                "invoice_pdf": {
                  "type": "string",
                  "example": "https://invoice.stripe.com/inv123456.pdf"
                },
                "invoice_status": {
                  "type": "string",
                  "example": "paid",
                  "enum": [
                    "open",
                    "paid",
                    "void"
                  ]
                },
                "invoice_total": {
                  "type": "integer",
                  "example": 3
                },
                "invoice_type": {
                  "type": "string",
                  "example": "stripe",
                  "enum": [
                    "stripe",
                    "bitpay",
                    "coinpayments",
                    "internal"
                  ]
                },
                "invoice_url": {
                  "type": "string",
                  "example": "https://invoice.stripe.com/i/acct_im5l/live_MTQ10200xkACQJDj?s=db"
                },
                "service_id": {
                  "type": "string",
                  "example": "169-1489-4251"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "Invoice search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "invoice_amount_paid": 3,
              "invoice_creation_datetime": "2023-09-14T18:30:00Z",
              "invoice_discounts": "[{\"code\":\"DISC10\",\"amount\":0.3}]",
              "invoice_due_datetime": "2023-09-15T18:30:00Z",
              "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka",
              "invoice_is_automatic_collection": true,
              "invoice_is_cart": true,
              "invoice_last_update_datetime": "2023-09-15T18:30:00Z",
              "invoice_line_items": "[{\"item\":\"isp\",\"price\":3,\"quantity\":1}]",
              "invoice_pdf": "https://invoice.stripe.com/inv123456.pdf",
              "invoice_status": "paid",
              "invoice_total": 3,
              "invoice_type": "stripe",
              "invoice_url": "https://invoice.stripe.com/i/acct_im5l/live_MTQ10200xkACQJDj?s=db",
              "service_id": "169-1489-4251"
            }
          ],
          "message": "Invoice search successful."
        }
      },
      "Log": {
        "type": "object",
        "properties": {
          "asn_id": {
            "type": "integer",
            "example": 1299
          },
          "city_alias": {
            "type": "string",
            "example": "New York"
          },
          "country_id": {
            "type": "string",
            "example": "US"
          },
          "customer_id": {
            "type": "integer",
            "example": 1932
          },
          "log_bytes": {
            "type": "integer",
            "example": 2048
          },
          "log_client_ip_address": {
            "type": "string",
            "example": "192.168.1.1"
          },
          "log_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-01T13:00:00Z"
          },
          "log_domain": {
            "type": "string",
            "example": "example.com"
          },
          "log_id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "log_ingress_ip_address": {
            "type": "string",
            "example": "10.0.0.1"
          },
          "log_ingress_port": {
            "type": "integer",
            "example": 8080
          },
          "log_location_failover": {
            "type": "boolean",
            "example": false
          },
          "log_method": {
            "type": "string",
            "example": "GET"
          },
          "log_network": {
            "type": "string",
            "example": "residential",
            "enum": [
              "datacenter",
              "isp",
              "residential"
            ]
          },
          "log_protocol": {
            "type": "string",
            "example": "HTTP",
            "enum": [
              "http",
              "socks5"
            ]
          },
          "log_session_failover": {
            "type": "boolean",
            "example": false
          },
          "log_session_id": {
            "type": "string",
            "example": "sess_01FGS5P0M6Q9S8W7G3JGZ44K4Z"
          },
          "log_status_code": {
            "type": "integer",
            "example": 200
          },
          "proxy_user_id": {
            "type": "string",
            "example": "proxyuser_001"
          },
          "service_id": {
            "type": "string",
            "example": "012-123-392"
          }
        }
      },
      "LogSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "asn_id": {
                "type": "integer",
                "example": 1299
              },
              "city_alias": {
                "type": "string",
                "example": "New York"
              },
              "country_id": {
                "type": "string",
                "example": "US"
              },
              "customer_id": {
                "type": "integer",
                "example": 1932
              },
              "log_bytes": {
                "type": "integer",
                "example": 2048
              },
              "log_client_ip_address": {
                "type": "string",
                "example": "192.168.1.1"
              },
              "log_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-04-01T13:00:00Z"
              },
              "log_domain": {
                "type": "string",
                "example": "example.com"
              },
              "log_id": {
                "type": "string",
                "example": "123e4567-e89b-12d3-a456-426614174000"
              },
              "log_ingress_ip_address": {
                "type": "string",
                "example": "10.0.0.1"
              },
              "log_ingress_port": {
                "type": "integer",
                "example": 8080
              },
              "log_location_failover": {
                "type": "boolean",
                "example": false
              },
              "log_method": {
                "type": "string",
                "example": "GET"
              },
              "log_network": {
                "type": "string",
                "example": "residential",
                "enum": [
                  "datacenter",
                  "isp",
                  "residential"
                ]
              },
              "log_protocol": {
                "type": "string",
                "example": "HTTP",
                "enum": [
                  "http",
                  "socks5"
                ]
              },
              "log_session_failover": {
                "type": "boolean",
                "example": false
              },
              "log_session_id": {
                "type": "string",
                "example": "sess_01FGS5P0M6Q9S8W7G3JGZ44K4Z"
              },
              "log_status_code": {
                "type": "integer",
                "example": 200
              },
              "proxy_user_id": {
                "type": "string",
                "example": "proxyuser_001"
              },
              "service_id": {
                "type": "string",
                "example": "012-123-392"
              }
            },
            "description": "Retrieved Log item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "Log retrieve was successful.",
        "example": {
          "data": {
            "asn_id": 1299,
            "city_alias": "New York",
            "country_id": "US",
            "customer_id": 1932,
            "log_bytes": 2048,
            "log_client_ip_address": "192.168.1.1",
            "log_creation_datetime": "2023-04-01T13:00:00Z",
            "log_domain": "example.com",
            "log_id": "123e4567-e89b-12d3-a456-426614174000",
            "log_ingress_ip_address": "10.0.0.1",
            "log_ingress_port": 8080,
            "log_location_failover": false,
            "log_method": "GET",
            "log_network": "residential",
            "log_protocol": "HTTP",
            "log_session_failover": false,
            "log_session_id": "sess_01FGS5P0M6Q9S8W7G3JGZ44K4Z",
            "log_status_code": 200,
            "proxy_user_id": "proxyuser_001",
            "service_id": "012-123-392"
          },
          "message": "Log successfully retrieved."
        }
      },
      "LogSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of Log items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of Log items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "asn_id": {
                  "type": "integer",
                  "example": 1299
                },
                "city_alias": {
                  "type": "string",
                  "example": "New York"
                },
                "country_id": {
                  "type": "string",
                  "example": "US"
                },
                "customer_id": {
                  "type": "integer",
                  "example": 1932
                },
                "log_bytes": {
                  "type": "integer",
                  "example": 2048
                },
                "log_client_ip_address": {
                  "type": "string",
                  "example": "192.168.1.1"
                },
                "log_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-04-01T13:00:00Z"
                },
                "log_domain": {
                  "type": "string",
                  "example": "example.com"
                },
                "log_id": {
                  "type": "string",
                  "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "log_ingress_ip_address": {
                  "type": "string",
                  "example": "10.0.0.1"
                },
                "log_ingress_port": {
                  "type": "integer",
                  "example": 8080
                },
                "log_location_failover": {
                  "type": "boolean",
                  "example": false
                },
                "log_method": {
                  "type": "string",
                  "example": "GET"
                },
                "log_network": {
                  "type": "string",
                  "example": "residential",
                  "enum": [
                    "datacenter",
                    "isp",
                    "residential"
                  ]
                },
                "log_protocol": {
                  "type": "string",
                  "example": "HTTP",
                  "enum": [
                    "http",
                    "socks5"
                  ]
                },
                "log_session_failover": {
                  "type": "boolean",
                  "example": false
                },
                "log_session_id": {
                  "type": "string",
                  "example": "sess_01FGS5P0M6Q9S8W7G3JGZ44K4Z"
                },
                "log_status_code": {
                  "type": "integer",
                  "example": 200
                },
                "proxy_user_id": {
                  "type": "string",
                  "example": "proxyuser_001"
                },
                "service_id": {
                  "type": "string",
                  "example": "012-123-392"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "Log search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "asn_id": 1299,
              "city_alias": "New York",
              "country_id": "US",
              "customer_id": 1932,
              "log_bytes": 2048,
              "log_client_ip_address": "192.168.1.1",
              "log_creation_datetime": "2023-04-01T13:00:00Z",
              "log_domain": "example.com",
              "log_id": "123e4567-e89b-12d3-a456-426614174000",
              "log_ingress_ip_address": "10.0.0.1",
              "log_ingress_port": 8080,
              "log_location_failover": false,
              "log_method": "GET",
              "log_network": "residential",
              "log_protocol": "HTTP",
              "log_session_failover": false,
              "log_session_id": "sess_01FGS5P0M6Q9S8W7G3JGZ44K4Z",
              "log_status_code": 200,
              "proxy_user_id": "proxyuser_001",
              "service_id": "012-123-392"
            }
          ],
          "message": "Log search successful."
        }
      },
      "LogSummary": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "example": 1932
          },
          "log_summary_bytes": {
            "type": "integer",
            "example": 10000
          },
          "log_summary_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-01T14:00:00Z"
          },
          "log_summary_domain": {
            "type": "string",
            "example": "another-example.com"
          },
          "log_summary_error": {
            "type": "integer",
            "example": 5
          },
          "log_summary_id": {
            "type": "string",
            "example": "456e7890-e89b-12d3-a456-426614174000"
          },
          "log_summary_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-02T14:00:00Z"
          },
          "log_summary_network": {
            "type": "string",
            "example": "residential",
            "enum": [
              "datacenter",
              "isp",
              "residential"
            ]
          },
          "log_summary_period": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-01T00:00:00Z"
          },
          "log_summary_requests": {
            "type": "integer",
            "example": 100
          },
          "log_summary_successful": {
            "type": "integer",
            "example": 95
          },
          "proxy_user_id": {
            "type": "string",
            "example": "proxyuser_002"
          }
        }
      },
      "LogSummarySuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "customer_id": {
                "type": "integer",
                "example": 1932
              },
              "log_summary_bytes": {
                "type": "integer",
                "example": 10000
              },
              "log_summary_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-04-01T14:00:00Z"
              },
              "log_summary_domain": {
                "type": "string",
                "example": "another-example.com"
              },
              "log_summary_error": {
                "type": "integer",
                "example": 5
              },
              "log_summary_id": {
                "type": "string",
                "example": "456e7890-e89b-12d3-a456-426614174000"
              },
              "log_summary_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-04-02T14:00:00Z"
              },
              "log_summary_network": {
                "type": "string",
                "example": "residential",
                "enum": [
                  "datacenter",
                  "isp",
                  "residential"
                ]
              },
              "log_summary_period": {
                "type": "string",
                "format": "date-time",
                "example": "2023-10-01T00:00:00Z"
              },
              "log_summary_requests": {
                "type": "integer",
                "example": 100
              },
              "log_summary_successful": {
                "type": "integer",
                "example": 95
              },
              "proxy_user_id": {
                "type": "string",
                "example": "proxyuser_002"
              }
            },
            "description": "Retrieved LogSummary item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "LogSummary retrieve was successful.",
        "example": {
          "data": {
            "customer_id": 1932,
            "log_summary_bytes": 10000,
            "log_summary_creation_datetime": "2023-04-01T14:00:00Z",
            "log_summary_domain": "another-example.com",
            "log_summary_error": 5,
            "log_summary_id": "456e7890-e89b-12d3-a456-426614174000",
            "log_summary_last_update_datetime": "2023-04-02T14:00:00Z",
            "log_summary_network": "residential",
            "log_summary_period": "2023-10-01T00:00:00Z",
            "log_summary_requests": 100,
            "log_summary_successful": 95,
            "proxy_user_id": "proxyuser_002"
          },
          "message": "LogSummary successfully retrieved."
        }
      },
      "LogSummarySuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of LogSummary items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of LogSummary items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "customer_id": {
                  "type": "integer",
                  "example": 1932
                },
                "log_summary_bytes": {
                  "type": "integer",
                  "example": 10000
                },
                "log_summary_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-04-01T14:00:00Z"
                },
                "log_summary_domain": {
                  "type": "string",
                  "example": "another-example.com"
                },
                "log_summary_error": {
                  "type": "integer",
                  "example": 5
                },
                "log_summary_id": {
                  "type": "string",
                  "example": "456e7890-e89b-12d3-a456-426614174000"
                },
                "log_summary_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-04-02T14:00:00Z"
                },
                "log_summary_network": {
                  "type": "string",
                  "example": "residential",
                  "enum": [
                    "datacenter",
                    "isp",
                    "residential"
                  ]
                },
                "log_summary_period": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-10-01T00:00:00Z"
                },
                "log_summary_requests": {
                  "type": "integer",
                  "example": 100
                },
                "log_summary_successful": {
                  "type": "integer",
                  "example": 95
                },
                "proxy_user_id": {
                  "type": "string",
                  "example": "proxyuser_002"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "LogSummary search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "customer_id": 1932,
              "log_summary_bytes": 10000,
              "log_summary_creation_datetime": "2023-04-01T14:00:00Z",
              "log_summary_domain": "another-example.com",
              "log_summary_error": 5,
              "log_summary_id": "456e7890-e89b-12d3-a456-426614174000",
              "log_summary_last_update_datetime": "2023-04-02T14:00:00Z",
              "log_summary_network": "residential",
              "log_summary_period": "2023-10-01T00:00:00Z",
              "log_summary_requests": 100,
              "log_summary_successful": 95,
              "proxy_user_id": "proxyuser_002"
            }
          ],
          "message": "LogSummary search successful."
        }
      },
      "MethodNotAllowedResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Method Not Allowed"
          },
          "error_id": {
            "type": "string",
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70"
          },
          "message": {
            "type": "string",
            "description": "Description of the error",
            "example": "Method is not supported for this endpoint."
          }
        },
        "description": "Method Not Allowed",
        "example": {
          "error": "Method Not Allowed",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "Method is not supported for this endpoint."
        }
      },
      "NotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Not Found"
          },
          "error_id": {
            "type": "string",
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70"
          },
          "message": {
            "type": "string",
            "description": "Description of the error",
            "example": "The requested resource or path could not be located."
          }
        },
        "description": "Not Found",
        "example": {
          "error": "Not Found",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "The requested resource or path could not be located."
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "notification_content": {
            "type": "string",
            "example": "Your service has been successfully updated to the latest version."
          },
          "notification_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T10:00:00Z"
          },
          "notification_icon": {
            "type": "string",
            "example": "bell"
          },
          "notification_id": {
            "type": "integer",
            "example": 1001
          },
          "notification_is_email": {
            "type": "boolean",
            "example": true
          },
          "notification_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T11:00:00Z"
          },
          "notification_link": {
            "type": "string",
            "example": "https://example.com/notification/1001"
          },
          "notification_preview": {
            "type": "string",
            "example": "Your service has been updated."
          },
          "notification_read_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T10:30:00Z"
          },
          "notification_scope": {
            "type": "string",
            "example": "global",
            "enum": [
              "customer",
              "global"
            ]
          },
          "notification_title": {
            "type": "string",
            "example": "Service Update"
          },
          "notification_type": {
            "type": "string",
            "example": "account",
            "enum": [
              "promotion",
              "service",
              "network",
              "account",
              "other"
            ]
          }
        }
      },
      "NotificationSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "notification_content": {
                "type": "string",
                "example": "Your service has been successfully updated to the latest version."
              },
              "notification_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-12T10:00:00Z"
              },
              "notification_icon": {
                "type": "string",
                "example": "bell"
              },
              "notification_id": {
                "type": "integer",
                "example": 1001
              },
              "notification_is_email": {
                "type": "boolean",
                "example": true
              },
              "notification_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-12T11:00:00Z"
              },
              "notification_link": {
                "type": "string",
                "example": "https://example.com/notification/1001"
              },
              "notification_preview": {
                "type": "string",
                "example": "Your service has been updated."
              },
              "notification_read_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-12T10:30:00Z"
              },
              "notification_scope": {
                "type": "string",
                "example": "global",
                "enum": [
                  "customer",
                  "global"
                ]
              },
              "notification_title": {
                "type": "string",
                "example": "Service Update"
              },
              "notification_type": {
                "type": "string",
                "example": "account",
                "enum": [
                  "promotion",
                  "service",
                  "network",
                  "account",
                  "other"
                ]
              }
            },
            "description": "Retrieved Notification item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "Notification retrieve was successful.",
        "example": {
          "data": {
            "notification_content": "Your service has been successfully updated to the latest version.",
            "notification_creation_datetime": "2023-09-12T10:00:00Z",
            "notification_icon": "bell",
            "notification_id": 1001,
            "notification_is_email": true,
            "notification_last_update_datetime": "2023-09-12T11:00:00Z",
            "notification_link": "https://example.com/notification/1001",
            "notification_preview": "Your service has been updated.",
            "notification_read_datetime": "2023-09-12T10:30:00Z",
            "notification_scope": "global",
            "notification_title": "Service Update",
            "notification_type": "account"
          },
          "message": "Notification successfully retrieved."
        }
      },
      "NotificationSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of Notification items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of Notification items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "notification_content": {
                  "type": "string",
                  "example": "Your service has been successfully updated to the latest version."
                },
                "notification_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-12T10:00:00Z"
                },
                "notification_icon": {
                  "type": "string",
                  "example": "bell"
                },
                "notification_id": {
                  "type": "integer",
                  "example": 1001
                },
                "notification_is_email": {
                  "type": "boolean",
                  "example": true
                },
                "notification_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-12T11:00:00Z"
                },
                "notification_link": {
                  "type": "string",
                  "example": "https://example.com/notification/1001"
                },
                "notification_preview": {
                  "type": "string",
                  "example": "Your service has been updated."
                },
                "notification_read_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-12T10:30:00Z"
                },
                "notification_scope": {
                  "type": "string",
                  "example": "global",
                  "enum": [
                    "customer",
                    "global"
                  ]
                },
                "notification_title": {
                  "type": "string",
                  "example": "Service Update"
                },
                "notification_type": {
                  "type": "string",
                  "example": "account",
                  "enum": [
                    "promotion",
                    "service",
                    "network",
                    "account",
                    "other"
                  ]
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "Notification search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "notification_content": "Your service has been successfully updated to the latest version.",
              "notification_creation_datetime": "2023-09-12T10:00:00Z",
              "notification_icon": "bell",
              "notification_id": 1001,
              "notification_is_email": true,
              "notification_last_update_datetime": "2023-09-12T11:00:00Z",
              "notification_link": "https://example.com/notification/1001",
              "notification_preview": "Your service has been updated.",
              "notification_read_datetime": "2023-09-12T10:30:00Z",
              "notification_scope": "global",
              "notification_title": "Service Update",
              "notification_type": "account"
            }
          ],
          "message": "Notification search successful."
        }
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "payment_method_billing_name": {
            "type": "string",
            "example": "John Doe"
          },
          "payment_method_expiry_month": {
            "type": "integer",
            "example": 9
          },
          "payment_method_expiry_year": {
            "type": "integer",
            "example": 2025
          },
          "payment_method_id": {
            "type": "string",
            "example": "pm_1NSx6OB2BUlqim5luefrhr"
          },
          "payment_method_is_default": {
            "type": "boolean",
            "example": true
          },
          "payment_method_last_four": {
            "type": "string",
            "example": "1234"
          },
          "payment_method_network": {
            "type": "string",
            "example": "visa"
          },
          "payment_method_platform": {
            "type": "string",
            "example": "stripe",
            "enum": [
              "stripe"
            ]
          },
          "payment_method_status": {
            "type": "string",
            "example": "complete",
            "enum": [
              "attached",
              "detached"
            ]
          },
          "payment_method_type": {
            "type": "string",
            "example": "card",
            "enum": [
              "card"
            ]
          }
        }
      },
      "PaymentMethodSuccessfulDeleteResponse": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "array",
            "description": "Array of deleted PaymentMethod IDs.",
            "items": {
              "type": "integer"
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the deletion."
          }
        },
        "description": "PaymentMethod deletion was successful.",
        "example": {
          "deleted": [
            123
          ],
          "message": "PaymentMethod deletion successful."
        }
      },
      "PaymentMethodSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "payment_method_billing_name": {
                "type": "string",
                "example": "John Doe"
              },
              "payment_method_expiry_month": {
                "type": "integer",
                "example": 9
              },
              "payment_method_expiry_year": {
                "type": "integer",
                "example": 2025
              },
              "payment_method_id": {
                "type": "string",
                "example": "pm_1NSx6OB2BUlqim5luefrhr"
              },
              "payment_method_is_default": {
                "type": "boolean",
                "example": true
              },
              "payment_method_last_four": {
                "type": "string",
                "example": "1234"
              },
              "payment_method_network": {
                "type": "string",
                "example": "visa"
              },
              "payment_method_platform": {
                "type": "string",
                "example": "stripe",
                "enum": [
                  "stripe"
                ]
              },
              "payment_method_status": {
                "type": "string",
                "example": "complete",
                "enum": [
                  "attached",
                  "detached"
                ]
              },
              "payment_method_type": {
                "type": "string",
                "example": "card",
                "enum": [
                  "card"
                ]
              }
            },
            "description": "Retrieved PaymentMethod item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "PaymentMethod retrieve was successful.",
        "example": {
          "data": {
            "payment_method_billing_name": "John Doe",
            "payment_method_expiry_month": "09",
            "payment_method_expiry_year": "2025",
            "payment_method_id": "pm_1NSx6OB2BUlqim5luefrhr",
            "payment_method_is_default": true,
            "payment_method_last_four": "1234",
            "payment_method_network": "visa",
            "payment_method_platform": "stripe",
            "payment_method_status": "complete",
            "payment_method_type": "card"
          },
          "message": "PaymentMethod successfully retrieved."
        }
      },
      "PaymentMethodSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of PaymentMethod items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of PaymentMethod items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "payment_method_billing_name": {
                  "type": "string",
                  "example": "John Doe"
                },
                "payment_method_expiry_month": {
                  "type": "integer",
                  "example": 9
                },
                "payment_method_expiry_year": {
                  "type": "integer",
                  "example": 2025
                },
                "payment_method_id": {
                  "type": "string",
                  "example": "pm_1NSx6OB2BUlqim5luefrhr"
                },
                "payment_method_is_default": {
                  "type": "boolean",
                  "example": true
                },
                "payment_method_last_four": {
                  "type": "string",
                  "example": "1234"
                },
                "payment_method_network": {
                  "type": "string",
                  "example": "visa"
                },
                "payment_method_platform": {
                  "type": "string",
                  "example": "stripe",
                  "enum": [
                    "stripe"
                  ]
                },
                "payment_method_status": {
                  "type": "string",
                  "example": "complete",
                  "enum": [
                    "attached",
                    "detached"
                  ]
                },
                "payment_method_type": {
                  "type": "string",
                  "example": "card",
                  "enum": [
                    "card"
                  ]
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "PaymentMethod search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "payment_method_billing_name": "John Doe",
              "payment_method_expiry_month": "09",
              "payment_method_expiry_year": "2025",
              "payment_method_id": "pm_1NSx6OB2BUlqim5luefrhr",
              "payment_method_is_default": true,
              "payment_method_last_four": "1234",
              "payment_method_network": "visa",
              "payment_method_platform": "stripe",
              "payment_method_status": "complete",
              "payment_method_type": "card"
            }
          ],
          "message": "PaymentMethod search successful."
        }
      },
      "Proxy": {
        "type": "object",
        "properties": {
          "asn_id": {
            "type": "integer",
            "example": 1299
          },
          "asn_name": {
            "type": "integer",
            "example": 1299
          },
          "city_example_postcode": {
            "type": "string",
            "example": "NR9 1"
          },
          "city_id": {
            "type": "string",
            "example": "12991"
          },
          "city_latitude": {
            "type": "number",
            "example": 4.442
          },
          "city_longitude": {
            "type": "number",
            "example": -1.111
          },
          "city_name": {
            "type": "string",
            "example": "Norwich"
          },
          "city_timezone": {
            "type": "string",
            "example": "europe/london"
          },
          "country_id": {
            "type": "string",
            "example": "gb"
          },
          "country_name": {
            "type": "string",
            "example": "gb"
          },
          "default_proxy_user_password": {
            "type": "string",
            "example": "c00lpassw0rd"
          },
          "default_proxy_user_username": {
            "type": "string",
            "example": "johndoe312"
          },
          "ip_address_id_v4": {
            "type": "string",
            "example": "191.0.0.0"
          },
          "ip_address_id_v6": {
            "type": "string",
            "example": "2001:db8:3333:4444:5555:6666:7777:8888"
          },
          "proxy_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T09:00:00Z"
          },
          "proxy_hostname": {
            "type": "string",
            "example": "proxy-10.pingproxies.com"
          },
          "proxy_hostserver_public_id": {
            "type": "string",
            "example": "z_1"
          },
          "proxy_http_port": {
            "type": "integer",
            "example": 8000
          },
          "proxy_id": {
            "type": "integer",
            "example": 10
          },
          "proxy_ip_address": {
            "type": "string",
            "example": "191.0.0.0"
          },
          "proxy_ip_address_v6": {
            "type": "string",
            "example": "2001:db8:3333:4444:5555:6666:7777:8888"
          },
          "proxy_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T09:30:00Z"
          },
          "proxy_password": {
            "type": "string",
            "example": "LAFmqe9LlUPUDBL8"
          },
          "proxy_protocol": {
            "type": "string",
            "example": "ipv4",
            "enum": [
              "ipv4",
              "ipv6",
              "dual"
            ]
          },
          "proxy_socks5_port": {
            "type": "integer",
            "example": 8080
          },
          "proxy_status": {
            "type": "string",
            "example": "active",
            "enum": [
              "available",
              "in_use",
              "reserved",
              "waiting",
              "pending_deletion"
            ]
          },
          "proxy_type": {
            "type": "string",
            "example": "http",
            "enum": [
              "datacenter",
              "isp",
              "residential"
            ]
          },
          "proxy_username": {
            "type": "string",
            "example": "k3K3hN0dHf3PSQXQ"
          },
          "service_id": {
            "type": "string",
            "example": "169-2109-6129"
          },
          "subdivision_id": {
            "type": "string",
            "example": "gb-eng"
          },
          "subdivision_name": {
            "type": "string",
            "example": "gb-eng"
          },
          "subnet_id": {
            "type": "string",
            "example": "191.0.0.0/24"
          },
          "subnet_id_v6": {
            "type": "string",
            "example": "2001:db8:abcd:1234:c000::/66"
          }
        }
      },
      "ProxyReplacement": {
        "type": "object",
        "properties": {
          "proxy_replacement_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T12:00:00Z"
          },
          "proxy_replacement_http_port": {
            "type": "integer",
            "example": 8080
          },
          "proxy_replacement_id": {
            "type": "integer",
            "example": 112
          },
          "proxy_replacement_ip_address_ipv4": {
            "type": "string",
            "example": "89.33.24.178"
          },
          "proxy_replacement_ip_address_ipv6": {
            "type": "string",
            "example": "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
          },
          "proxy_replacement_new_http_port": {
            "type": "integer",
            "example": 8080
          },
          "proxy_replacement_new_ip_address_ipv4": {
            "type": "string",
            "example": "129.13.24.100"
          },
          "proxy_replacement_new_ip_address_ipv6": {
            "type": "string",
            "example": "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
          },
          "proxy_replacement_new_socks5_port": {
            "type": "integer",
            "example": 1080
          },
          "proxy_replacement_reason": {
            "type": "string",
            "example": "customer_request",
            "enum": [
              "customer_request",
              "ip_reputation",
              "end_of_deployment",
              "outage",
              "other"
            ]
          },
          "proxy_replacement_socks5_port": {
            "type": "integer",
            "example": 1080
          }
        }
      },
      "ProxySuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "asn_id": {
                "type": "integer",
                "example": 1299
              },
              "asn_name": {
                "type": "integer",
                "example": 1299
              },
              "city_example_postcode": {
                "type": "string",
                "example": "NR9 1"
              },
              "city_id": {
                "type": "string",
                "example": "12991"
              },
              "city_latitude": {
                "type": "number",
                "example": 4.442
              },
              "city_longitude": {
                "type": "number",
                "example": -1.111
              },
              "city_name": {
                "type": "string",
                "example": "Norwich"
              },
              "city_timezone": {
                "type": "string",
                "example": "europe/london"
              },
              "country_id": {
                "type": "string",
                "example": "gb"
              },
              "country_name": {
                "type": "string",
                "example": "gb"
              },
              "default_proxy_user_password": {
                "type": "string",
                "example": "c00lpassw0rd"
              },
              "default_proxy_user_username": {
                "type": "string",
                "example": "johndoe312"
              },
              "ip_address_id_v4": {
                "type": "string",
                "example": "191.0.0.0"
              },
              "ip_address_id_v6": {
                "type": "string",
                "example": "2001:db8:3333:4444:5555:6666:7777:8888"
              },
              "proxy_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-12T09:00:00Z"
              },
              "proxy_hostname": {
                "type": "string",
                "example": "proxy-10.pingproxies.com"
              },
              "proxy_hostserver_public_id": {
                "type": "string",
                "example": "z_1"
              },
              "proxy_http_port": {
                "type": "integer",
                "example": 8000
              },
              "proxy_id": {
                "type": "integer",
                "example": 10
              },
              "proxy_ip_address": {
                "type": "string",
                "example": "191.0.0.0"
              },
              "proxy_ip_address_v6": {
                "type": "string",
                "example": "2001:db8:3333:4444:5555:6666:7777:8888"
              },
              "proxy_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-12T09:30:00Z"
              },
              "proxy_password": {
                "type": "string",
                "example": "LAFmqe9LlUPUDBL8"
              },
              "proxy_protocol": {
                "type": "string",
                "example": "ipv4",
                "enum": [
                  "ipv4",
                  "ipv6",
                  "dual"
                ]
              },
              "proxy_socks5_port": {
                "type": "integer",
                "example": 8080
              },
              "proxy_status": {
                "type": "string",
                "example": "active",
                "enum": [
                  "available",
                  "in_use",
                  "reserved",
                  "waiting",
                  "pending_deletion"
                ]
              },
              "proxy_type": {
                "type": "string",
                "example": "http",
                "enum": [
                  "datacenter",
                  "isp",
                  "residential"
                ]
              },
              "proxy_username": {
                "type": "string",
                "example": "k3K3hN0dHf3PSQXQ"
              },
              "service_id": {
                "type": "string",
                "example": "169-2109-6129"
              },
              "subdivision_id": {
                "type": "string",
                "example": "gb-eng"
              },
              "subdivision_name": {
                "type": "string",
                "example": "gb-eng"
              },
              "subnet_id": {
                "type": "string",
                "example": "191.0.0.0/24"
              },
              "subnet_id_v6": {
                "type": "string",
                "example": "2001:db8:abcd:1234:c000::/66"
              }
            },
            "description": "Retrieved Proxy item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "Proxy retrieve was successful.",
        "example": {
          "data": {
            "asn_id": 1299,
            "asn_name": 1299,
            "city_example_postcode": "NR9 1",
            "city_id": 12991,
            "city_latitude": 4.442,
            "city_longitude": -1.111,
            "city_name": "Norwich",
            "city_timezone": "europe/london",
            "country_id": "gb",
            "country_name": "gb",
            "default_proxy_user_password": "c00lpassw0rd",
            "default_proxy_user_username": "johndoe312",
            "ip_address_id_v4": "191.0.0.0",
            "ip_address_id_v6": "2001:db8:3333:4444:5555:6666:7777:8888",
            "proxy_creation_datetime": "2023-09-12T09:00:00Z",
            "proxy_hostname": "proxy-10.pingproxies.com",
            "proxy_hostserver_public_id": "z_1",
            "proxy_http_port": "8000",
            "proxy_id": 10,
            "proxy_ip_address": "191.0.0.0",
            "proxy_ip_address_v6": "2001:db8:3333:4444:5555:6666:7777:8888",
            "proxy_last_update_datetime": "2023-09-12T09:30:00Z",
            "proxy_password": "LAFmqe9LlUPUDBL8",
            "proxy_protocol": "ipv4",
            "proxy_socks5_port": "8080",
            "proxy_status": "active",
            "proxy_type": "http",
            "proxy_username": "k3K3hN0dHf3PSQXQ",
            "service_id": "169-2109-6129",
            "subdivision_id": "gb-eng",
            "subdivision_name": "gb-eng",
            "subnet_id": "191.0.0.0/24",
            "subnet_id_v6": "2001:db8:abcd:1234:c000::/66"
          },
          "message": "Proxy successfully retrieved."
        }
      },
      "ProxySuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of Proxy items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of Proxy items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "asn_id": {
                  "type": "integer",
                  "example": 1299
                },
                "asn_name": {
                  "type": "integer",
                  "example": 1299
                },
                "city_example_postcode": {
                  "type": "string",
                  "example": "NR9 1"
                },
                "city_id": {
                  "type": "string",
                  "example": "12991"
                },
                "city_latitude": {
                  "type": "number",
                  "example": 4.442
                },
                "city_longitude": {
                  "type": "number",
                  "example": -1.111
                },
                "city_name": {
                  "type": "string",
                  "example": "Norwich"
                },
                "city_timezone": {
                  "type": "string",
                  "example": "europe/london"
                },
                "country_id": {
                  "type": "string",
                  "example": "gb"
                },
                "country_name": {
                  "type": "string",
                  "example": "gb"
                },
                "default_proxy_user_password": {
                  "type": "string",
                  "example": "c00lpassw0rd"
                },
                "default_proxy_user_username": {
                  "type": "string",
                  "example": "johndoe312"
                },
                "ip_address_id_v4": {
                  "type": "string",
                  "example": "191.0.0.0"
                },
                "ip_address_id_v6": {
                  "type": "string",
                  "example": "2001:db8:3333:4444:5555:6666:7777:8888"
                },
                "proxy_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-12T09:00:00Z"
                },
                "proxy_hostname": {
                  "type": "string",
                  "example": "proxy-10.pingproxies.com"
                },
                "proxy_hostserver_public_id": {
                  "type": "string",
                  "example": "z_1"
                },
                "proxy_http_port": {
                  "type": "integer",
                  "example": 8000
                },
                "proxy_id": {
                  "type": "integer",
                  "example": 10
                },
                "proxy_ip_address": {
                  "type": "string",
                  "example": "191.0.0.0"
                },
                "proxy_ip_address_v6": {
                  "type": "string",
                  "example": "2001:db8:3333:4444:5555:6666:7777:8888"
                },
                "proxy_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-12T09:30:00Z"
                },
                "proxy_password": {
                  "type": "string",
                  "example": "LAFmqe9LlUPUDBL8"
                },
                "proxy_protocol": {
                  "type": "string",
                  "example": "ipv4",
                  "enum": [
                    "ipv4",
                    "ipv6",
                    "dual"
                  ]
                },
                "proxy_socks5_port": {
                  "type": "integer",
                  "example": 8080
                },
                "proxy_status": {
                  "type": "string",
                  "example": "active",
                  "enum": [
                    "available",
                    "in_use",
                    "reserved",
                    "waiting",
                    "pending_deletion"
                  ]
                },
                "proxy_type": {
                  "type": "string",
                  "example": "http",
                  "enum": [
                    "datacenter",
                    "isp",
                    "residential"
                  ]
                },
                "proxy_username": {
                  "type": "string",
                  "example": "k3K3hN0dHf3PSQXQ"
                },
                "service_id": {
                  "type": "string",
                  "example": "169-2109-6129"
                },
                "subdivision_id": {
                  "type": "string",
                  "example": "gb-eng"
                },
                "subdivision_name": {
                  "type": "string",
                  "example": "gb-eng"
                },
                "subnet_id": {
                  "type": "string",
                  "example": "191.0.0.0/24"
                },
                "subnet_id_v6": {
                  "type": "string",
                  "example": "2001:db8:abcd:1234:c000::/66"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "Proxy search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "asn_id": 1299,
              "asn_name": 1299,
              "city_example_postcode": "NR9 1",
              "city_id": 12991,
              "city_latitude": 4.442,
              "city_longitude": -1.111,
              "city_name": "Norwich",
              "city_timezone": "europe/london",
              "country_id": "gb",
              "country_name": "gb",
              "default_proxy_user_password": "c00lpassw0rd",
              "default_proxy_user_username": "johndoe312",
              "ip_address_id_v4": "191.0.0.0",
              "ip_address_id_v6": "2001:db8:3333:4444:5555:6666:7777:8888",
              "proxy_creation_datetime": "2023-09-12T09:00:00Z",
              "proxy_hostname": "proxy-10.pingproxies.com",
              "proxy_hostserver_public_id": "z_1",
              "proxy_http_port": "8000",
              "proxy_id": 10,
              "proxy_ip_address": "191.0.0.0",
              "proxy_ip_address_v6": "2001:db8:3333:4444:5555:6666:7777:8888",
              "proxy_last_update_datetime": "2023-09-12T09:30:00Z",
              "proxy_password": "LAFmqe9LlUPUDBL8",
              "proxy_protocol": "ipv4",
              "proxy_socks5_port": "8080",
              "proxy_status": "active",
              "proxy_type": "http",
              "proxy_username": "k3K3hN0dHf3PSQXQ",
              "service_id": "169-2109-6129",
              "subdivision_id": "gb-eng",
              "subdivision_name": "gb-eng",
              "subnet_id": "191.0.0.0/24",
              "subnet_id_v6": "2001:db8:abcd:1234:c000::/66"
            }
          ],
          "message": "Proxy search successful."
        }
      },
      "ProxyUser": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "example": 1
          },
          "ip_address_authentications": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "proxy_user_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-28T12:34:56Z"
          },
          "proxy_user_id": {
            "type": "string",
            "example": "username123"
          },
          "proxy_user_ip_address_authentication_limit": {
            "type": "integer",
            "example": 3
          },
          "proxy_user_is_default": {
            "type": "boolean",
            "example": false
          },
          "proxy_user_is_deleted": {
            "type": "boolean",
            "example": false
          },
          "proxy_user_is_service_restricted": {
            "type": "boolean",
            "example": false
          },
          "proxy_user_is_strict_security": {
            "type": "boolean",
            "example": false
          },
          "proxy_user_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-28T12:34:56Z"
          },
          "proxy_user_metadata": {
            "type": "object",
            "properties": {},
            "example": "[{\"resell_order_id\":\"12992-1032\"}]"
          },
          "proxy_user_password": {
            "type": "string",
            "example": "password123"
          },
          "proxy_user_residential_limit": {
            "type": "integer",
            "example": 134142432
          },
          "proxy_user_residential_used": {
            "type": "integer",
            "example": 31223
          },
          "restricted_service_ids": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ProxyUserSuccessfulDeleteResponse": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "array",
            "description": "Array of deleted ProxyUser IDs.",
            "items": {
              "type": "integer"
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the deletion."
          }
        },
        "description": "ProxyUser deletion was successful.",
        "example": {
          "deleted": [
            123
          ],
          "message": "ProxyUser deletion successful."
        }
      },
      "ProxyUserSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "customer_id": {
                "type": "integer",
                "example": 1
              },
              "ip_address_authentications": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "proxy_user_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-28T12:34:56Z"
              },
              "proxy_user_id": {
                "type": "string",
                "example": "username123"
              },
              "proxy_user_ip_address_authentication_limit": {
                "type": "integer",
                "example": 3
              },
              "proxy_user_is_default": {
                "type": "boolean",
                "example": false
              },
              "proxy_user_is_deleted": {
                "type": "boolean",
                "example": false
              },
              "proxy_user_is_service_restricted": {
                "type": "boolean",
                "example": false
              },
              "proxy_user_is_strict_security": {
                "type": "boolean",
                "example": false
              },
              "proxy_user_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-28T12:34:56Z"
              },
              "proxy_user_metadata": {
                "type": "object",
                "properties": {},
                "example": "[{\"resell_order_id\":\"12992-1032\"}]"
              },
              "proxy_user_password": {
                "type": "string",
                "example": "password123"
              },
              "proxy_user_residential_limit": {
                "type": "integer",
                "example": 134142432
              },
              "proxy_user_residential_used": {
                "type": "integer",
                "example": 31223
              },
              "restricted_service_ids": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Retrieved ProxyUser item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "ProxyUser retrieve was successful.",
        "example": {
          "data": {
            "customer_id": 1,
            "proxy_user_creation_datetime": "2023-09-28T12:34:56Z",
            "proxy_user_id": "username123",
            "proxy_user_ip_address_authentication_limit": 3,
            "proxy_user_is_default": false,
            "proxy_user_is_deleted": false,
            "proxy_user_is_service_restricted": false,
            "proxy_user_is_strict_security": false,
            "proxy_user_last_update_datetime": "2023-09-28T12:34:56Z",
            "proxy_user_metadata": "[{\"resell_order_id\":\"12992-1032\"}]",
            "proxy_user_password": "password123",
            "proxy_user_residential_limit": 134142432,
            "proxy_user_residential_used": 31223
          },
          "message": "ProxyUser successfully retrieved."
        }
      },
      "ProxyUserSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of ProxyUser items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of ProxyUser items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "customer_id": {
                  "type": "integer",
                  "example": 1
                },
                "ip_address_authentications": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "proxy_user_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-28T12:34:56Z"
                },
                "proxy_user_id": {
                  "type": "string",
                  "example": "username123"
                },
                "proxy_user_ip_address_authentication_limit": {
                  "type": "integer",
                  "example": 3
                },
                "proxy_user_is_default": {
                  "type": "boolean",
                  "example": false
                },
                "proxy_user_is_deleted": {
                  "type": "boolean",
                  "example": false
                },
                "proxy_user_is_service_restricted": {
                  "type": "boolean",
                  "example": false
                },
                "proxy_user_is_strict_security": {
                  "type": "boolean",
                  "example": false
                },
                "proxy_user_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-28T12:34:56Z"
                },
                "proxy_user_metadata": {
                  "type": "object",
                  "properties": {},
                  "example": "[{\"resell_order_id\":\"12992-1032\"}]"
                },
                "proxy_user_password": {
                  "type": "string",
                  "example": "password123"
                },
                "proxy_user_residential_limit": {
                  "type": "integer",
                  "example": 134142432
                },
                "proxy_user_residential_used": {
                  "type": "integer",
                  "example": 31223
                },
                "restricted_service_ids": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "ProxyUser search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "customer_id": 1,
              "proxy_user_creation_datetime": "2023-09-28T12:34:56Z",
              "proxy_user_id": "username123",
              "proxy_user_ip_address_authentication_limit": 3,
              "proxy_user_is_default": false,
              "proxy_user_is_deleted": false,
              "proxy_user_is_service_restricted": false,
              "proxy_user_is_strict_security": false,
              "proxy_user_last_update_datetime": "2023-09-28T12:34:56Z",
              "proxy_user_metadata": "[{\"resell_order_id\":\"12992-1032\"}]",
              "proxy_user_password": "password123",
              "proxy_user_residential_limit": 134142432,
              "proxy_user_residential_used": 31223
            }
          ],
          "message": "ProxyUser search successful."
        }
      },
      "ResidentialLedger": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "example": 1932
          },
          "residential_ledger_bytes": {
            "type": "integer",
            "example": 128290101
          },
          "residential_ledger_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-01T12:00:00Z"
          },
          "residential_ledger_id": {
            "type": "string",
            "example": "123"
          },
          "residential_ledger_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-02T12:00:00Z"
          },
          "residential_ledger_period_date": {
            "type": "string",
            "example": "2023-10-01"
          },
          "residential_ledger_reason": {
            "type": "string",
            "example": "Adjustment Reason"
          },
          "residential_ledger_requests": {
            "type": "integer",
            "example": 1244
          },
          "service_adjustment_id": {
            "type": "integer",
            "example": 10
          },
          "service_id": {
            "type": "string",
            "example": "012-123-392"
          }
        }
      },
      "ResidentialLedgerSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "customer_id": {
                "type": "integer",
                "example": 1932
              },
              "residential_ledger_bytes": {
                "type": "integer",
                "example": 128290101
              },
              "residential_ledger_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-04-01T12:00:00Z"
              },
              "residential_ledger_id": {
                "type": "string",
                "example": "123"
              },
              "residential_ledger_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-04-02T12:00:00Z"
              },
              "residential_ledger_period_date": {
                "type": "string",
                "example": "2023-10-01"
              },
              "residential_ledger_reason": {
                "type": "string",
                "example": "Adjustment Reason"
              },
              "residential_ledger_requests": {
                "type": "integer",
                "example": 1244
              },
              "service_adjustment_id": {
                "type": "integer",
                "example": 10
              },
              "service_id": {
                "type": "string",
                "example": "012-123-392"
              }
            },
            "description": "Retrieved ResidentialLedger item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "ResidentialLedger retrieve was successful.",
        "example": {
          "data": {
            "customer_id": 1932,
            "residential_ledger_bytes": 128290101,
            "residential_ledger_creation_datetime": "2023-04-01T12:00:00Z",
            "residential_ledger_id": 123,
            "residential_ledger_last_update_datetime": "2023-04-02T12:00:00Z",
            "residential_ledger_period_date": "2023-10-01",
            "residential_ledger_reason": "Adjustment Reason",
            "residential_ledger_requests": 1244,
            "service_adjustment_id": 10,
            "service_id": "012-123-392"
          },
          "message": "ResidentialLedger successfully retrieved."
        }
      },
      "ResidentialLedgerSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of ResidentialLedger items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of ResidentialLedger items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "customer_id": {
                  "type": "integer",
                  "example": 1932
                },
                "residential_ledger_bytes": {
                  "type": "integer",
                  "example": 128290101
                },
                "residential_ledger_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-04-01T12:00:00Z"
                },
                "residential_ledger_id": {
                  "type": "string",
                  "example": "123"
                },
                "residential_ledger_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-04-02T12:00:00Z"
                },
                "residential_ledger_period_date": {
                  "type": "string",
                  "example": "2023-10-01"
                },
                "residential_ledger_reason": {
                  "type": "string",
                  "example": "Adjustment Reason"
                },
                "residential_ledger_requests": {
                  "type": "integer",
                  "example": 1244
                },
                "service_adjustment_id": {
                  "type": "integer",
                  "example": 10
                },
                "service_id": {
                  "type": "string",
                  "example": "012-123-392"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "ResidentialLedger search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "customer_id": 1932,
              "residential_ledger_bytes": 128290101,
              "residential_ledger_creation_datetime": "2023-04-01T12:00:00Z",
              "residential_ledger_id": 123,
              "residential_ledger_last_update_datetime": "2023-04-02T12:00:00Z",
              "residential_ledger_period_date": "2023-10-01",
              "residential_ledger_reason": "Adjustment Reason",
              "residential_ledger_requests": 1244,
              "service_adjustment_id": 10,
              "service_id": "012-123-392"
            }
          ],
          "message": "ResidentialLedger search successful."
        }
      },
      "Service": {
        "type": "object",
        "properties": {
          "country_id": {
            "type": "string",
            "example": "us"
          },
          "payment_method_id": {
            "type": "string",
            "example": "pm_1NjyqfB2BUlqim5l2LgRUo0a"
          },
          "service_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T10:00:00Z"
          },
          "service_cycle": {
            "type": "string",
            "example": "1:month"
          },
          "service_dispatch_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T11:00:00Z"
          },
          "service_earliest_cancellation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T12:00:00Z"
          },
          "service_expiry_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-12T10:00:00Z"
          },
          "service_id": {
            "type": "string",
            "example": "169-2109-6129"
          },
          "service_image": {
            "type": "string",
            "example": "https://example.com/image.png"
          },
          "service_is_automatic_collection": {
            "type": "boolean",
            "example": true
          },
          "service_is_pending_cancellation": {
            "type": "boolean",
            "example": false
          },
          "service_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T12:00:00Z"
          },
          "service_metadata": {
            "type": "object",
            "properties": {},
            "example": "[{\"resell_customer_id\":\"12992-1032\"}]"
          },
          "service_name": {
            "type": "string",
            "example": "Premium ISP"
          },
          "service_promotional_code": {
            "type": "string",
            "example": "PROMO2023"
          },
          "service_protocol": {
            "type": "string",
            "example": "ipv4",
            "enum": [
              "ipv4",
              "ipv6",
              "dual"
            ]
          },
          "service_quantity": {
            "type": "integer",
            "example": 5
          },
          "service_status": {
            "type": "string",
            "example": "active",
            "enum": [
              "awaiting_manual_fulfillment",
              "awaiting_additional_fulfillment",
              "awaiting_fulfillment",
              "active",
              "canceled",
              "complete"
            ]
          },
          "service_total": {
            "type": "integer",
            "example": 100
          },
          "service_type": {
            "type": "string",
            "example": "isp",
            "enum": [
              "datacenter",
              "isp",
              "residential",
              "off_catalog"
            ]
          }
        }
      },
      "ServiceAdjustment": {
        "type": "object",
        "properties": {
          "invoice_id": {
            "type": "string",
            "example": "in_1NpRIvB2BUlqim5lN4v3URka"
          },
          "service_adjustment_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-14T18:30:00Z"
          },
          "service_adjustment_eval": {
            "type": "object",
            "properties": {},
            "example": "{\"service_expiry_datetime\": [\"2023-09-14T18:30:00Z\", \"2024-09-14T18:30:00Z\"]}"
          },
          "service_adjustment_id": {
            "type": "integer",
            "example": 213
          },
          "service_adjustment_is_administrator": {
            "type": "boolean",
            "example": false
          },
          "service_adjustment_is_automatic": {
            "type": "boolean",
            "example": true
          },
          "service_adjustment_is_customer": {
            "type": "boolean",
            "example": true
          },
          "service_adjustment_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-15T18:30:00Z"
          },
          "service_adjustment_post": {
            "type": "object",
            "properties": {},
            "example": "{\"service_expiry_datetime\": \"2024-09-14T18:30:00Z\"}"
          },
          "service_adjustment_pre": {
            "type": "object",
            "properties": {},
            "example": "{\"service_expiry_datetime\": \"2023-09-14T18:30:00Z\"}"
          },
          "service_adjustment_status": {
            "type": "string",
            "example": "active",
            "enum": [
              "complete",
              "pending",
              "failed"
            ]
          },
          "service_adjustment_type": {
            "type": "string",
            "example": "extension",
            "enum": [
              "ingestion",
              "fulfillment",
              "additional_fulfillment",
              "update",
              "proxy_replacement",
              "extension",
              "top_up",
              "top_up_and_extension"
            ]
          },
          "service_id": {
            "type": "string",
            "example": "169-1489-4251"
          }
        }
      },
      "ServiceAdjustmentSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "invoice_id": {
                "type": "string",
                "example": "in_1NpRIvB2BUlqim5lN4v3URka"
              },
              "service_adjustment_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-14T18:30:00Z"
              },
              "service_adjustment_eval": {
                "type": "object",
                "properties": {},
                "example": "{\"service_expiry_datetime\": [\"2023-09-14T18:30:00Z\", \"2024-09-14T18:30:00Z\"]}"
              },
              "service_adjustment_id": {
                "type": "integer",
                "example": 213
              },
              "service_adjustment_is_administrator": {
                "type": "boolean",
                "example": false
              },
              "service_adjustment_is_automatic": {
                "type": "boolean",
                "example": true
              },
              "service_adjustment_is_customer": {
                "type": "boolean",
                "example": true
              },
              "service_adjustment_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-15T18:30:00Z"
              },
              "service_adjustment_post": {
                "type": "object",
                "properties": {},
                "example": "{\"service_expiry_datetime\": \"2024-09-14T18:30:00Z\"}"
              },
              "service_adjustment_pre": {
                "type": "object",
                "properties": {},
                "example": "{\"service_expiry_datetime\": \"2023-09-14T18:30:00Z\"}"
              },
              "service_adjustment_status": {
                "type": "string",
                "example": "active",
                "enum": [
                  "complete",
                  "pending",
                  "failed"
                ]
              },
              "service_adjustment_type": {
                "type": "string",
                "example": "extension",
                "enum": [
                  "ingestion",
                  "fulfillment",
                  "additional_fulfillment",
                  "update",
                  "proxy_replacement",
                  "extension",
                  "top_up",
                  "top_up_and_extension"
                ]
              },
              "service_id": {
                "type": "string",
                "example": "169-1489-4251"
              }
            },
            "description": "Retrieved ServiceAdjustment item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "ServiceAdjustment retrieve was successful.",
        "example": {
          "data": {
            "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka",
            "service_adjustment_creation_datetime": "2023-09-14T18:30:00Z",
            "service_adjustment_eval": "{\"service_expiry_datetime\": [\"2023-09-14T18:30:00Z\", \"2024-09-14T18:30:00Z\"]}",
            "service_adjustment_id": 213,
            "service_adjustment_is_administrator": false,
            "service_adjustment_is_automatic": true,
            "service_adjustment_is_customer": true,
            "service_adjustment_last_update_datetime": "2023-09-15T18:30:00Z",
            "service_adjustment_post": "{\"service_expiry_datetime\": \"2024-09-14T18:30:00Z\"}",
            "service_adjustment_pre": "{\"service_expiry_datetime\": \"2023-09-14T18:30:00Z\"}",
            "service_adjustment_status": "active",
            "service_adjustment_type": "extension",
            "service_id": "169-1489-4251"
          },
          "message": "ServiceAdjustment successfully retrieved."
        }
      },
      "ServiceAdjustmentSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of ServiceAdjustment items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of ServiceAdjustment items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "invoice_id": {
                  "type": "string",
                  "example": "in_1NpRIvB2BUlqim5lN4v3URka"
                },
                "service_adjustment_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-14T18:30:00Z"
                },
                "service_adjustment_eval": {
                  "type": "object",
                  "properties": {},
                  "example": "{\"service_expiry_datetime\": [\"2023-09-14T18:30:00Z\", \"2024-09-14T18:30:00Z\"]}"
                },
                "service_adjustment_id": {
                  "type": "integer",
                  "example": 213
                },
                "service_adjustment_is_administrator": {
                  "type": "boolean",
                  "example": false
                },
                "service_adjustment_is_automatic": {
                  "type": "boolean",
                  "example": true
                },
                "service_adjustment_is_customer": {
                  "type": "boolean",
                  "example": true
                },
                "service_adjustment_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-15T18:30:00Z"
                },
                "service_adjustment_post": {
                  "type": "object",
                  "properties": {},
                  "example": "{\"service_expiry_datetime\": \"2024-09-14T18:30:00Z\"}"
                },
                "service_adjustment_pre": {
                  "type": "object",
                  "properties": {},
                  "example": "{\"service_expiry_datetime\": \"2023-09-14T18:30:00Z\"}"
                },
                "service_adjustment_status": {
                  "type": "string",
                  "example": "active",
                  "enum": [
                    "complete",
                    "pending",
                    "failed"
                  ]
                },
                "service_adjustment_type": {
                  "type": "string",
                  "example": "extension",
                  "enum": [
                    "ingestion",
                    "fulfillment",
                    "additional_fulfillment",
                    "update",
                    "proxy_replacement",
                    "extension",
                    "top_up",
                    "top_up_and_extension"
                  ]
                },
                "service_id": {
                  "type": "string",
                  "example": "169-1489-4251"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "ServiceAdjustment search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka",
              "service_adjustment_creation_datetime": "2023-09-14T18:30:00Z",
              "service_adjustment_eval": "{\"service_expiry_datetime\": [\"2023-09-14T18:30:00Z\", \"2024-09-14T18:30:00Z\"]}",
              "service_adjustment_id": 213,
              "service_adjustment_is_administrator": false,
              "service_adjustment_is_automatic": true,
              "service_adjustment_is_customer": true,
              "service_adjustment_last_update_datetime": "2023-09-15T18:30:00Z",
              "service_adjustment_post": "{\"service_expiry_datetime\": \"2024-09-14T18:30:00Z\"}",
              "service_adjustment_pre": "{\"service_expiry_datetime\": \"2023-09-14T18:30:00Z\"}",
              "service_adjustment_status": "active",
              "service_adjustment_type": "extension",
              "service_id": "169-1489-4251"
            }
          ],
          "message": "ServiceAdjustment search successful."
        }
      },
      "ServiceSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "country_id": {
                "type": "string",
                "example": "us"
              },
              "payment_method_id": {
                "type": "string",
                "example": "pm_1NjyqfB2BUlqim5l2LgRUo0a"
              },
              "service_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-12T10:00:00Z"
              },
              "service_cycle": {
                "type": "string",
                "example": "1:month"
              },
              "service_dispatch_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-12T11:00:00Z"
              },
              "service_earliest_cancellation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-12T12:00:00Z"
              },
              "service_expiry_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-10-12T10:00:00Z"
              },
              "service_id": {
                "type": "string",
                "example": "169-2109-6129"
              },
              "service_image": {
                "type": "string",
                "example": "https://example.com/image.png"
              },
              "service_is_automatic_collection": {
                "type": "boolean",
                "example": true
              },
              "service_is_pending_cancellation": {
                "type": "boolean",
                "example": false
              },
              "service_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-12T12:00:00Z"
              },
              "service_metadata": {
                "type": "object",
                "properties": {},
                "example": "[{\"resell_customer_id\":\"12992-1032\"}]"
              },
              "service_name": {
                "type": "string",
                "example": "Premium ISP"
              },
              "service_promotional_code": {
                "type": "string",
                "example": "PROMO2023"
              },
              "service_protocol": {
                "type": "string",
                "example": "ipv4",
                "enum": [
                  "ipv4",
                  "ipv6",
                  "dual"
                ]
              },
              "service_quantity": {
                "type": "integer",
                "example": 5
              },
              "service_status": {
                "type": "string",
                "example": "active",
                "enum": [
                  "awaiting_manual_fulfillment",
                  "awaiting_additional_fulfillment",
                  "awaiting_fulfillment",
                  "active",
                  "canceled",
                  "complete"
                ]
              },
              "service_total": {
                "type": "integer",
                "example": 100
              },
              "service_type": {
                "type": "string",
                "example": "isp",
                "enum": [
                  "datacenter",
                  "isp",
                  "residential",
                  "off_catalog"
                ]
              }
            },
            "description": "Retrieved Service item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "Service retrieve was successful.",
        "example": {
          "data": {
            "country_id": "us",
            "payment_method_id": "pm_1NjyqfB2BUlqim5l2LgRUo0a",
            "service_creation_datetime": "2023-09-12T10:00:00Z",
            "service_cycle": "1:month",
            "service_dispatch_datetime": "2023-09-12T11:00:00Z",
            "service_earliest_cancellation_datetime": "2023-09-12T12:00:00Z",
            "service_expiry_datetime": "2023-10-12T10:00:00Z",
            "service_id": "169-2109-6129",
            "service_image": "https://example.com/image.png",
            "service_is_automatic_collection": true,
            "service_is_pending_cancellation": false,
            "service_last_update_datetime": "2023-09-12T12:00:00Z",
            "service_metadata": "[{\"resell_customer_id\":\"12992-1032\"}]",
            "service_name": "Premium ISP",
            "service_promotional_code": "PROMO2023",
            "service_protocol": "ipv4",
            "service_quantity": 5,
            "service_status": "active",
            "service_total": 100,
            "service_type": "isp"
          },
          "message": "Service successfully retrieved."
        }
      },
      "ServiceSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of Service items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of Service items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "country_id": {
                  "type": "string",
                  "example": "us"
                },
                "payment_method_id": {
                  "type": "string",
                  "example": "pm_1NjyqfB2BUlqim5l2LgRUo0a"
                },
                "service_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-12T10:00:00Z"
                },
                "service_cycle": {
                  "type": "string",
                  "example": "1:month"
                },
                "service_dispatch_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-12T11:00:00Z"
                },
                "service_earliest_cancellation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-12T12:00:00Z"
                },
                "service_expiry_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-10-12T10:00:00Z"
                },
                "service_id": {
                  "type": "string",
                  "example": "169-2109-6129"
                },
                "service_image": {
                  "type": "string",
                  "example": "https://example.com/image.png"
                },
                "service_is_automatic_collection": {
                  "type": "boolean",
                  "example": true
                },
                "service_is_pending_cancellation": {
                  "type": "boolean",
                  "example": false
                },
                "service_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-12T12:00:00Z"
                },
                "service_metadata": {
                  "type": "object",
                  "properties": {},
                  "example": "[{\"resell_customer_id\":\"12992-1032\"}]"
                },
                "service_name": {
                  "type": "string",
                  "example": "Premium ISP"
                },
                "service_promotional_code": {
                  "type": "string",
                  "example": "PROMO2023"
                },
                "service_protocol": {
                  "type": "string",
                  "example": "ipv4",
                  "enum": [
                    "ipv4",
                    "ipv6",
                    "dual"
                  ]
                },
                "service_quantity": {
                  "type": "integer",
                  "example": 5
                },
                "service_status": {
                  "type": "string",
                  "example": "active",
                  "enum": [
                    "awaiting_manual_fulfillment",
                    "awaiting_additional_fulfillment",
                    "awaiting_fulfillment",
                    "active",
                    "canceled",
                    "complete"
                  ]
                },
                "service_total": {
                  "type": "integer",
                  "example": 100
                },
                "service_type": {
                  "type": "string",
                  "example": "isp",
                  "enum": [
                    "datacenter",
                    "isp",
                    "residential",
                    "off_catalog"
                  ]
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "Service search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "country_id": "us",
              "payment_method_id": "pm_1NjyqfB2BUlqim5l2LgRUo0a",
              "service_creation_datetime": "2023-09-12T10:00:00Z",
              "service_cycle": "1:month",
              "service_dispatch_datetime": "2023-09-12T11:00:00Z",
              "service_earliest_cancellation_datetime": "2023-09-12T12:00:00Z",
              "service_expiry_datetime": "2023-10-12T10:00:00Z",
              "service_id": "169-2109-6129",
              "service_image": "https://example.com/image.png",
              "service_is_automatic_collection": true,
              "service_is_pending_cancellation": false,
              "service_last_update_datetime": "2023-09-12T12:00:00Z",
              "service_metadata": "[{\"resell_customer_id\":\"12992-1032\"}]",
              "service_name": "Premium ISP",
              "service_promotional_code": "PROMO2023",
              "service_protocol": "ipv4",
              "service_quantity": 5,
              "service_status": "active",
              "service_total": 100,
              "service_type": "isp"
            }
          ],
          "message": "Service search successful."
        }
      },
      "Subdivision": {
        "type": "object",
        "properties": {
          "country_id": {
            "type": "string",
            "example": "gb"
          },
          "subdivision_alias": {
            "type": "string",
            "example": "eng"
          },
          "subdivision_id": {
            "type": "string",
            "example": "gb-eng"
          },
          "subdivision_name": {
            "type": "string",
            "example": "Île-de-France"
          }
        }
      },
      "SubdivisionSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "country_id": {
                "type": "string",
                "example": "gb"
              },
              "subdivision_alias": {
                "type": "string",
                "example": "eng"
              },
              "subdivision_id": {
                "type": "string",
                "example": "gb-eng"
              },
              "subdivision_name": {
                "type": "string",
                "example": "Île-de-France"
              }
            },
            "description": "Retrieved Subdivision item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "Subdivision retrieve was successful.",
        "example": {
          "data": {
            "country_id": "gb",
            "subdivision_alias": "eng",
            "subdivision_id": "gb-eng",
            "subdivision_name": "Île-de-France"
          },
          "message": "Subdivision successfully retrieved."
        }
      },
      "SubdivisionSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of Subdivision items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of Subdivision items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "country_id": {
                  "type": "string",
                  "example": "gb"
                },
                "subdivision_alias": {
                  "type": "string",
                  "example": "eng"
                },
                "subdivision_id": {
                  "type": "string",
                  "example": "gb-eng"
                },
                "subdivision_name": {
                  "type": "string",
                  "example": "Île-de-France"
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "Subdivision search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "country_id": "gb",
              "subdivision_alias": "eng",
              "subdivision_id": "gb-eng",
              "subdivision_name": "Île-de-France"
            }
          ],
          "message": "Subdivision search successful."
        }
      },
      "SubscriptionSchedule": {
        "type": "object",
        "properties": {
          "service_subscription_id": {
            "type": "string",
            "example": "sub_1NpPVfB2BUlqim5lA374YoIh"
          },
          "subscription_schedule_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T10:00:00Z"
          },
          "subscription_schedule_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-15T10:00:00Z"
          },
          "subscription_schedule_id": {
            "type": "string",
            "example": "sub_sched_1O9pdJB2BUlqim5lARQ3T9km"
          },
          "subscription_schedule_is_administrator": {
            "type": "boolean",
            "example": false
          },
          "subscription_schedule_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-12T12:00:00Z"
          },
          "subscription_schedule_status": {
            "type": "string",
            "example": "active",
            "enum": [
              "not_started",
              "active",
              "completed",
              "released",
              "canceled"
            ]
          },
          "subscription_schedule_type": {
            "type": "string",
            "example": "upgrade",
            "enum": [
              "end_of_introductory_offer",
              "change_price",
              "increase_quantity",
              "decrease_quantity",
              "increase_quantity_change_price",
              "decrease_quantity_change_price"
            ]
          }
        }
      },
      "SubscriptionScheduleSuccessfulDeleteResponse": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "array",
            "description": "Array of deleted SubscriptionSchedule IDs.",
            "items": {
              "type": "integer"
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the deletion."
          }
        },
        "description": "SubscriptionSchedule deletion was successful.",
        "example": {
          "deleted": [
            123
          ],
          "message": "SubscriptionSchedule deletion successful."
        }
      },
      "SubscriptionScheduleSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "service_subscription_id": {
                "type": "string",
                "example": "sub_1NpPVfB2BUlqim5lA374YoIh"
              },
              "subscription_schedule_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-12T10:00:00Z"
              },
              "subscription_schedule_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-15T10:00:00Z"
              },
              "subscription_schedule_id": {
                "type": "string",
                "example": "sub_sched_1O9pdJB2BUlqim5lARQ3T9km"
              },
              "subscription_schedule_is_administrator": {
                "type": "boolean",
                "example": false
              },
              "subscription_schedule_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-12T12:00:00Z"
              },
              "subscription_schedule_status": {
                "type": "string",
                "example": "active",
                "enum": [
                  "not_started",
                  "active",
                  "completed",
                  "released",
                  "canceled"
                ]
              },
              "subscription_schedule_type": {
                "type": "string",
                "example": "upgrade",
                "enum": [
                  "end_of_introductory_offer",
                  "change_price",
                  "increase_quantity",
                  "decrease_quantity",
                  "increase_quantity_change_price",
                  "decrease_quantity_change_price"
                ]
              }
            },
            "description": "Retrieved SubscriptionSchedule item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "SubscriptionSchedule retrieve was successful.",
        "example": {
          "data": {
            "service_subscription_id": "sub_1NpPVfB2BUlqim5lA374YoIh",
            "subscription_schedule_creation_datetime": "2023-09-12T10:00:00Z",
            "subscription_schedule_datetime": "2023-09-15T10:00:00Z",
            "subscription_schedule_id": "sub_sched_1O9pdJB2BUlqim5lARQ3T9km",
            "subscription_schedule_is_administrator": false,
            "subscription_schedule_last_update_datetime": "2023-09-12T12:00:00Z",
            "subscription_schedule_status": "active",
            "subscription_schedule_type": "upgrade"
          },
          "message": "SubscriptionSchedule successfully retrieved."
        }
      },
      "SubscriptionScheduleSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of SubscriptionSchedule items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of SubscriptionSchedule items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "service_subscription_id": {
                  "type": "string",
                  "example": "sub_1NpPVfB2BUlqim5lA374YoIh"
                },
                "subscription_schedule_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-12T10:00:00Z"
                },
                "subscription_schedule_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-15T10:00:00Z"
                },
                "subscription_schedule_id": {
                  "type": "string",
                  "example": "sub_sched_1O9pdJB2BUlqim5lARQ3T9km"
                },
                "subscription_schedule_is_administrator": {
                  "type": "boolean",
                  "example": false
                },
                "subscription_schedule_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-12T12:00:00Z"
                },
                "subscription_schedule_status": {
                  "type": "string",
                  "example": "active",
                  "enum": [
                    "not_started",
                    "active",
                    "completed",
                    "released",
                    "canceled"
                  ]
                },
                "subscription_schedule_type": {
                  "type": "string",
                  "example": "upgrade",
                  "enum": [
                    "end_of_introductory_offer",
                    "change_price",
                    "increase_quantity",
                    "decrease_quantity",
                    "increase_quantity_change_price",
                    "decrease_quantity_change_price"
                  ]
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "SubscriptionSchedule search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "service_subscription_id": "sub_1NpPVfB2BUlqim5lA374YoIh",
              "subscription_schedule_creation_datetime": "2023-09-12T10:00:00Z",
              "subscription_schedule_datetime": "2023-09-15T10:00:00Z",
              "subscription_schedule_id": "sub_sched_1O9pdJB2BUlqim5lARQ3T9km",
              "subscription_schedule_is_administrator": false,
              "subscription_schedule_last_update_datetime": "2023-09-12T12:00:00Z",
              "subscription_schedule_status": "active",
              "subscription_schedule_type": "upgrade"
            }
          ],
          "message": "SubscriptionSchedule search successful."
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "invoice_id": {
            "type": "string",
            "example": "in_1NpRIvB2BUlqim5lN4v3URka"
          },
          "payment_method_id": {
            "type": "string",
            "example": "pm_1NSx6OB2BUlqim5luefrhr"
          },
          "transaction_amount": {
            "type": "integer",
            "example": 100
          },
          "transaction_amount_alternate": {
            "type": "number",
            "example": 100.5
          },
          "transaction_completed_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-14T19:30:00Z"
          },
          "transaction_creation_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-14T18:30:00Z"
          },
          "transaction_currency": {
            "type": "string",
            "example": "usd"
          },
          "transaction_id": {
            "type": "string",
            "example": "pi_3NpRaZB2BUlqim5l10FDVxnf"
          },
          "transaction_last_update_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-15T18:30:00Z"
          },
          "transaction_method": {
            "type": "string",
            "example": "card",
            "enum": [
              "card",
              "cryptocurrency"
            ]
          },
          "transaction_processor": {
            "type": "string",
            "example": "stripe",
            "enum": [
              "stripe",
              "bitpay",
              "coinpayments"
            ]
          },
          "transaction_refund_amount": {
            "type": "integer",
            "example": 0
          },
          "transaction_refund_datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-20T18:30:00Z"
          },
          "transaction_refund_reason": {
            "type": "string",
            "example": "Too Expensive"
          },
          "transaction_status": {
            "type": "string",
            "example": "complete",
            "enum": [
              "succeeded",
              "processing",
              "failed",
              "refunded"
            ]
          }
        }
      },
      "TransactionSuccessfulRetrieveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "invoice_id": {
                "type": "string",
                "example": "in_1NpRIvB2BUlqim5lN4v3URka"
              },
              "payment_method_id": {
                "type": "string",
                "example": "pm_1NSx6OB2BUlqim5luefrhr"
              },
              "transaction_amount": {
                "type": "integer",
                "example": 100
              },
              "transaction_amount_alternate": {
                "type": "number",
                "example": 100.5
              },
              "transaction_completed_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-14T19:30:00Z"
              },
              "transaction_creation_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-14T18:30:00Z"
              },
              "transaction_currency": {
                "type": "string",
                "example": "usd"
              },
              "transaction_id": {
                "type": "string",
                "example": "pi_3NpRaZB2BUlqim5l10FDVxnf"
              },
              "transaction_last_update_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-15T18:30:00Z"
              },
              "transaction_method": {
                "type": "string",
                "example": "card",
                "enum": [
                  "card",
                  "cryptocurrency"
                ]
              },
              "transaction_processor": {
                "type": "string",
                "example": "stripe",
                "enum": [
                  "stripe",
                  "bitpay",
                  "coinpayments"
                ]
              },
              "transaction_refund_amount": {
                "type": "integer",
                "example": 0
              },
              "transaction_refund_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-20T18:30:00Z"
              },
              "transaction_refund_reason": {
                "type": "string",
                "example": "Too Expensive"
              },
              "transaction_status": {
                "type": "string",
                "example": "complete",
                "enum": [
                  "succeeded",
                  "processing",
                  "failed",
                  "refunded"
                ]
              }
            },
            "description": "Retrieved Transaction item details."
          },
          "message": {
            "type": "string",
            "description": "Status message for the retrieval."
          }
        },
        "description": "Transaction retrieve was successful.",
        "example": {
          "data": {
            "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka",
            "payment_method_id": "pm_1NSx6OB2BUlqim5luefrhr",
            "transaction_amount": 100,
            "transaction_amount_alternate": 100.5,
            "transaction_completed_datetime": "2023-09-14T19:30:00Z",
            "transaction_creation_datetime": "2023-09-14T18:30:00Z",
            "transaction_currency": "usd",
            "transaction_id": "pi_3NpRaZB2BUlqim5l10FDVxnf",
            "transaction_last_update_datetime": "2023-09-15T18:30:00Z",
            "transaction_method": "card",
            "transaction_processor": "stripe",
            "transaction_refund_amount": 0,
            "transaction_refund_datetime": "2023-09-20T18:30:00Z",
            "transaction_refund_reason": "Too Expensive",
            "transaction_status": "complete"
          },
          "message": "Transaction successfully retrieved."
        }
      },
      "TransactionSuccessfulSearchResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of Transaction items returned."
          },
          "data": {
            "type": "array",
            "description": "Array of Transaction items matching the search criteria.",
            "items": {
              "type": "object",
              "properties": {
                "invoice_id": {
                  "type": "string",
                  "example": "in_1NpRIvB2BUlqim5lN4v3URka"
                },
                "payment_method_id": {
                  "type": "string",
                  "example": "pm_1NSx6OB2BUlqim5luefrhr"
                },
                "transaction_amount": {
                  "type": "integer",
                  "example": 100
                },
                "transaction_amount_alternate": {
                  "type": "number",
                  "example": 100.5
                },
                "transaction_completed_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-14T19:30:00Z"
                },
                "transaction_creation_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-14T18:30:00Z"
                },
                "transaction_currency": {
                  "type": "string",
                  "example": "usd"
                },
                "transaction_id": {
                  "type": "string",
                  "example": "pi_3NpRaZB2BUlqim5l10FDVxnf"
                },
                "transaction_last_update_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-15T18:30:00Z"
                },
                "transaction_method": {
                  "type": "string",
                  "example": "card",
                  "enum": [
                    "card",
                    "cryptocurrency"
                  ]
                },
                "transaction_processor": {
                  "type": "string",
                  "example": "stripe",
                  "enum": [
                    "stripe",
                    "bitpay",
                    "coinpayments"
                  ]
                },
                "transaction_refund_amount": {
                  "type": "integer",
                  "example": 0
                },
                "transaction_refund_datetime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-20T18:30:00Z"
                },
                "transaction_refund_reason": {
                  "type": "string",
                  "example": "Too Expensive"
                },
                "transaction_status": {
                  "type": "string",
                  "example": "complete",
                  "enum": [
                    "succeeded",
                    "processing",
                    "failed",
                    "refunded"
                  ]
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Status message for the search."
          }
        },
        "description": "Transaction search was successful.",
        "example": {
          "count": 1,
          "data": [
            {
              "invoice_id": "in_1NpRIvB2BUlqim5lN4v3URka",
              "payment_method_id": "pm_1NSx6OB2BUlqim5luefrhr",
              "transaction_amount": 100,
              "transaction_amount_alternate": 100.5,
              "transaction_completed_datetime": "2023-09-14T19:30:00Z",
              "transaction_creation_datetime": "2023-09-14T18:30:00Z",
              "transaction_currency": "usd",
              "transaction_id": "pi_3NpRaZB2BUlqim5l10FDVxnf",
              "transaction_last_update_datetime": "2023-09-15T18:30:00Z",
              "transaction_method": "card",
              "transaction_processor": "stripe",
              "transaction_refund_amount": 0,
              "transaction_refund_datetime": "2023-09-20T18:30:00Z",
              "transaction_refund_reason": "Too Expensive",
              "transaction_status": "complete"
            }
          ],
          "message": "Transaction search successful."
        }
      },
      "TwoFactorAuthenticationRequired": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Two Factor Authentication Required"
          },
          "message": {
            "type": "string",
            "description": "Description of the error",
            "example": "Please retry request with Two-Factor Authentication keys."
          },
          "two_factor_authentication_public_key": {
            "type": "string",
            "description": "Public key for Two-Factor Authentication.",
            "example": "1234567890"
          },
          "two_factor_authentication_service": {
            "type": "string",
            "description": "Service used for Two-Factor Authentication.",
            "example": "email"
          },
          "two_factor_authentication_target": {
            "type": "string",
            "description": "The target which the two_factor_authentication_private_key has been sent to.",
            "example": "e******@pingproxies.com"
          }
        },
        "description": "Two-Factor Authentication Required",
        "example": {
          "error": "Two-Factor Authentication Required",
          "message": "This action requires Two-Factor Authentication. Please retry request with Two-Factor Authentication keys.",
          "two_factor_authentication_public_key": "1234567890",
          "two_factor_authentication_service": "email",
          "two_factor_authentication_target": "e******@pingproxies.com"
        }
      },
      "UnauthorizedResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Unauthorized"
          },
          "error_id": {
            "type": "string",
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70"
          },
          "message": {
            "type": "string",
            "description": "Description of the error",
            "example": "You need to be authenticated to access this resource."
          }
        },
        "description": "Unauthorized",
        "example": {
          "error": "Unauthorized",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "You need to be authenticated to access this resource."
        }
      },
      "UnprocessableResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Unprocessable"
          },
          "error_id": {
            "type": "string",
            "description": "Error ID",
            "example": "0a5a76aa-e286-477b-b88f-e5b492a0ba70"
          },
          "message": {
            "type": "string",
            "description": "Description of the error",
            "example": "The data provided is valid but can't be processed due to failing business logic."
          }
        },
        "description": "Unprocessable",
        "example": {
          "error": "Unprocessable",
          "error_id": "0a5a76aa-e286-477b-b88f-e5b492a0ba70",
          "message": "The data provided is valid but can't be processed due to failing business logic."
        }
      }
    },
    "parameters": {
      "ClientIPAddress": {
        "name": "X-Application-Forwarded-Client-IP-Address",
        "in": "header",
        "description": "Client IP address forwarded by the application.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ClientUserAgent": {
        "name": "X-Application-Forwarded-Client-User-Agent",
        "in": "header",
        "description": "Client User-Agent forwarded by the application.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "Page number for pagination",
        "schema": {
          "type": "integer"
        }
      },
      "per_page": {
        "name": "per_page",
        "in": "query",
        "description": "Number of items per page for pagination",
        "schema": {
          "type": "integer"
        }
      },
      "sort_by": {
        "name": "sort_by",
        "in": "query",
        "description": "Key for sorting or random.",
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "APIPrivateKey": {
        "type": "apiKey",
        "description": " Private API key for user-level authentication.",
        "name": "X-API-Private-Key",
        "in": "header"
      },
      "APIPublicKey": {
        "type": "apiKey",
        "description": " Public API key for user-level authentication.",
        "name": "X-API-Public-Key",
        "in": "header"
      },
      "ApplicationAPIPrivateKey": {
        "type": "apiKey",
        "description": "Private API key for application-level authentication.",
        "name": "X-Application-API-Private-Key",
        "in": "header"
      },
      "ApplicationAPIPublicKey": {
        "type": "apiKey",
        "description": "Public API key for application-level authentication.",
        "name": "X-Application-API-Public-Key",
        "in": "header"
      },
      "BearerAuth": {
        "type": "apiKey",
        "description": "JWT token provided in the 'Authorization' header for customer-level authentication. Format as: Bearer [token]",
        "name": "Authorization",
        "in": "header"
      },
      "CookieAuth": {
        "type": "apiKey",
        "description": "JWT token stored in a cookie named 'access_token_cookie' for customer-level authentication.",
        "name": "access_token_cookie",
        "in": "header"
      },
      "GeofeedKey": {
        "type": "apiKey",
        "description": "Geofeed key for object-level authentication.",
        "name": "X-Geofeed-Key",
        "in": "header"
      },
      "ProxyHostserverAPIAuthenticationKey": {
        "type": "apiKey",
        "description": "Authentication API key for specific ProxyHostserver.",
        "name": "X-ProxyHostserver-API-Authentication-Key",
        "in": "header"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Authorization",
      "tags": [
        "Authorization"
      ]
    },
    {
      "name": "Account Management",
      "tags": [
        "Customer",
        "Notification",
        "API Key"
      ]
    },
    {
      "name": "Services",
      "tags": [
        "Service",
        "Service Adjustment",
        "Subscription Schedule",
        "Proxy"
      ]
    },
    {
      "name": "Residential",
      "tags": [
        "Residential",
        "Residential Ledger"
      ]
    },
    {
      "name": "Proxy Authentication",
      "tags": [
        "Proxy User"
      ]
    },
    {
      "name": "Analytics & Observability",
      "tags": [
        "Log",
        "Log Summary",
        "API Request"
      ]
    },
    {
      "name": "Payments",
      "tags": [
        "Invoice",
        "Transaction",
        "Balance Transaction",
        "Payment Method"
      ]
    },
    {
      "name": "Checkout",
      "tags": [
        "Checkout",
        "Cart",
        "Product Catalog"
      ]
    },
    {
      "name": "Utilities",
      "tags": [
        "Utilities"
      ]
    },
    {
      "name": "Location & Carrier Selection",
      "tags": [
        "ASN",
        "Continent",
        "Country",
        "Subdivision",
        "City"
      ]
    }
  ],
  "x-topics": [],
  "x-original-swagger-version": "2.0"
}
